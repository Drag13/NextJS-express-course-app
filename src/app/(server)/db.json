[
  {
    "name": "ci-cd-net",
    "text": [
      "# Free and easy Continuous Integration for your GitHub project with three easy steps - build, test, deploy",
      "![Free and easy Continuous Integration for your GitHub project with three easy steps - build, test, deploy](~/img/kdpv/travis-ci.png)",
      "Hi guys! Today we will learn how to setup Continuous Integration process for the C# project hosted on GitHub. This is very easy, can really improve your code quality and you always be sure that no one destroys your code with latest commit. Are you interested? Let's give it a try!",
      "## You will need",
      "* [GitHub account](https://github.com)",
      "* [.NET Core SDK > 2.1.](https://www.microsoft.com/net/)",
      "* [Visual Studio 2017](https://www.visualstudio.com/)",
      "* [Azure account](https://portal.azure.com/) - optional",
      "Let's start.",
      "## Start a new project",
      "Create a new repository on GitHub and clone it locally. Don't forget to select .gitignore file template for VisualStudio to keep your repository clean and nice. Than generate new .NET Ð¡ore web application with",
      "```cmd",
      "dotnet new sln --name CIDemo",
      "dotnet new web --name web",
      "dotnet sln CIDemo.sln add web/web.csproj",
      "```",
      "Commit your changes directly to master and push them to the remote.",
      "## CI Build",
      "Now we will setup first step of the CI process - build check.",
      "Go to the [Travis](https://travis-ci.org/) and log in with GitHub account. Give Travis access to your repository.",
      "Go back to the repository, create new branch CIBuild and add the .travis.yml file to the root of the folder",
      "```text",
      "language: csharp",
      "dotnet: 2.1.4",
      "sudo: false",
      "env:",
      "    global:",
      "        - DOTNET_CLI_TELEMETRY_OPTOUT: 1",
      "script:",
      "    - dotnet build CIDemo.sln -c Release",
      "```",
      ".travis.yml file will keep your Travis settings and configure your CI process. Right now it contains:",
      "* language - your programming language.",
      "* dotnet - version of the required dotnet SDK",
      "* env - environment variables passed to the build process. I've added DOTNET_CLI_TELEMETRY_OPTOUT to [switch off](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry) telemetry.",
      "* script - commands for Travis.",
      "Commit and push your changes, then make a pull request. Now you should see something like this:",
      "![Travis ok image](./TravisBuildSuccess.png)",
      "This means that all is going ok. If you create a pull request that will not be buildable, Travis will report this.",
      "![Travis failed image](./TravisBuildFailed.png)",
      "Don't forget to take build badge from the personal cabinet.",
      "[![Build Status](./passing.svg)](https://travis-ci.org/Drag13/CIDemo)",
      "## CI Tests",
      "Now let's configure tests for our CI process. The main idea of this step is to check that new code doesn't break your existing code and keep code coverage on the acceptable level.",
      "Inside the solution, create the new project Test. Add [coverlet.msbuild](https://github.com/tonerdo/coverlet) NuGet package to the Test project. It will generate code coverage report file.",
      "```cmd",
      "dotnet new xunit --name test",
      "dotnet add test/test.csproj package coverlet.msbuild -v 1.2.0",
      "dotnet sln CIDemo.sln add test/test.csproj",
      "```",
      "Inside web project create the new class",
      "```c#",
      "using System;",
      "namespace web",
      "{",
      "    public class IdProvider",
      "    {",
      "        public Guid NewId()",
      "        {",
      "            return Guid.NewGuid();",
      "        }",
      "    }",
      "}",
      "```",
      "Inside the Test project create the new class",
      "```c#",
      "using web;",
      "using Xunit;",
      "namespace test",
      "{",
      "    public class IdProviderTest",
      "    {",
      "        [Fact]",
      "        public void NewIdShouldReturnUniqueValues()",
      "        {",
      "            var idProvider = new IdProvider();",
      "            var id1 = idProvider.NewId();",
      "            var id2 = idProvider.NewId();",
      "            Assert.NotEqual(id1, id2);",
      "        }",
      "    }",
      "}",
      "```",
      "Update travis.yml file and add this line to the script section:",
      "```cmd",
      " - dotnet test -c Release --no-build test/test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover",
      "```",
      "If you want you can specify threshold level:",
      "```cmd",
      "dotnet test /p:CollectCoverage=true /p:Threshold=TRESHOLD_LVL",
      "```",
      "If your code coverage becomes lower than TRESHOLD_LVL you will receive an error. This is useful when you like to have not less than the certain level of code coverage",
      "Go to the [Codecov](https://codecov.io), log in with your GitHub account and give access to your repository.",
      "Add this to the end of the .travis.yml file",
      "```text",
      "    after_script:",
      "        - bash <(curl -s https://codecov.io/bash)",
      "```",
      "Commit and push. Now you should see something like this",
      "![Codecov report image](./CoverageReportSmall.png)",
      "Don't forget to take second badge.",
      "![Codecov badge](./badge.svg)",
      "## CI Deploy to Azure",
      "Here I will show how to setup deploymnt to Azure. But if you don't want to use Azure, Travis supports a lot of other deployment targets like Google and Amazon. [Here](https://docs.travis-ci.com/user/deployment/) you can read more about deployment directly from Travis.",
      "Default deployment to Azure is very simple. It is already tuned to work with .NET Core applications out of the box. So the only thing you need is to give Azure access to your repository and synchronize them. All other stuff will be done automatically.",
      "Login to [Azure](https://portal.azure.com) and create new site with this link",
      "[link](https://portal.azure.com/#create/Microsoft.WebSite). Specify site name, subscription, and Operating System. Than select DeploymentOptions -> Github -> Project -> Branch. After this, your remote repository will be synced with GitHub and a few minutes later - deployed.",
      "## CI Deploy to Azure - Advanced",
      "But what if you need to do some advanced stuff like build UI, update web.config, or other something other? The cool thing that deployment process is fully configurable. All you need is to specify build script and describe steps you want to see.",
      "Go back to the repository. Add two new files to the root of the project",
      "* [.deployment](https://github.com/Drag13/CIDemo/blob/master/.deployment) // describes deployment steps",
      "* [build.cmd](https://github.com/Drag13/CIDemo/blob/master/deploy.cmd) // describe deployment process",
      "The build.cmd file may look a bit scary but in fact, it is very simple. Here what is going inside",
      "* Setup paths",
      "* Install [kudusync](https://github.com/projectkudu/KuduSync)",
      "* Restore NuGet packages",
      "* Publish application",
      "* Copy publish result to the site folder",
      "The main idea is that this is only cmd script that allows you to do everything you need. You can use dotnet, NuGet, node, npm and other tools to customize your build process whatever you want. If you want to read more about deploymnt to Azure you can read this article - [How to build and deploy your front-end application from GitHub to Azure with Kudu](https://medium.com/@drag13dev/how-to-sync-your-github-repository-and-azure-40bdb564d788)",
      "That is all! Hope this will help you to make your applications better. Have a nice day!",
      "## Other CI tools",
      "Travis is not the only one can help you with free CI.",
      "You also can check next projects:",
      "* [codeship](https://codeship.com/pricing) (free for OpenSource)",
      "* [circleci](http://circleci.com/pricing/) (free 1,500 build minutes per month, special offers for OpenSource)",
      "* [buddy](https://buddy.works/pricing) free (120 executions/month)",
      "## Useful Links",
      "* [Travis documentation](https://docs.travis-ci.com/)",
      "* [Codecov documentation](https://docs.codecov.io/docs)",
      "* [Coverlet documentation](https://github.com/tonerdo/coverlet/blob/master/README.md)",
      "* [Kudusync](https://github.com/projectkudu/KuduSync)",
      "* [DemoRepository](https://github.com/Drag13/FSharpWebAppWithCIDemo)",
      "* [How to build and deploy your front-end application from GitHub to Azure with Kudu](https://medium.com/@drag13dev/how-to-sync-your-github-repository-and-azure-40bdb564d788)"
    ],
    "header": "# Free and easy Continuous Integration for your GitHub project with three easy steps - build, test, deploy",
    "preview": "![Free and easy Continuous Integration for your GitHub project with three easy steps - build, test, deploy](~/img/kdpv/travis-ci.png)"
  },
  {
    "name": "create-new-nextjs-app-with-prettier-eslint-tests",
    "text": [
      "# How to create and configure Next.JS v.13 application with Prettier, Eslint, Husky and Jest",
      "This short instruction will guide you through creating a Next.js app, complete with Prettier, ESLint, Husky, and Jest configurations, and deployment on Azure. Learn how to set up a new project, configure Prettier and ESLint, use Husky for pre-commit hooks, write tests with Jest, and deploy your app to Azure for an optimized production environment.",
      "## Table of Content",
      "- Create new Next.JS application",
      "- Setup Prettier",
      "- Configure Eslint",
      "- Setup Husky with LintStaged",
      "- Setup tests with Jest",
      "- Deployment notes",
      "- Extra options",
      "## Before you start",
      "- Use the console for a better debugging experience, especially for the commit and push phases with Husky.",
      "- You may require extra steps depending on your needs and tools.",
      "## Create a new NextJS project",
      "- Create an **EMPTY** remote repository (GitHub, GitLab, etc)",
      "* Create s new project locally:",
      "```bash",
      "npx create-next-app@latest dev-blog",
      "```",
      "- Connect local repo with the remote and push the master branch:",
      "```bash",
      "git remote add origin https://github.com/Drag13/NextJS-express-course-app-mirror.git",
      "git branch -M master",
      "git push -u origin master",
      "```",
      "- Fix dev dependencies, moving them to the dev section:",
      "```bash",
      "npm i @types/node @types/react @types/react-dom eslint eslint-config-next typescript -D",
      "```",
      "- Commit the code and push the results to the remote with `git push`",
      "## Setup Prettier",
      "- Add prettier",
      "```bash",
      " npm i prettier eslint-config-prettier eslint-plugin-prettier -D",
      "```",
      "- Configure prettier, add `prettierrc.json` to the root",
      "```json",
      "{",
      "  \"trailingComma\": \"es5\",",
      "  \"tabWidth\": 2,",
      "  \"semi\": true,",
      "  \"singleQuote\": true",
      "}",
      "```",
      "- Include prettier to `.eslintrc.json`",
      "```json",
      "{",
      "  \"extends\": [\"next/core-web-vitals\", \"prettier\"],",
      "  \"plugins\": [\"prettier\"],",
      "  \"rules\": {",
      "    \"prettier/prettier\": [",
      "      \"error\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "  }",
      "}",
      "```",
      "- Commit the code and push the results to the remote with `git push`",
      "## Configure EsLint",
      "- Install parser and plugin",
      "```bash",
      "npm i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin",
      "```",
      "- Configure EsLint to recommended",
      "```json",
      "{",
      "  \"extends\": [",
      "    \"next/core-web-vitals\",",
      "    \"eslint:recommended\",",
      "    \"plugin:@typescript-eslint/recommended\",",
      "    \"prettier\"",
      "  ],",
      "  \"plugins\": [\"prettier\", \"@typescript-eslint\"],",
      "  \"parser\": \"@typescript-eslint/parser\",",
      "  \"rules\": {",
      "    \"prettier/prettier\": [",
      "      \"error\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "  },",
      "  \"root\": true",
      "}",
      "```",
      "- Verify the eslint with `npx eslint .`",
      "- Commit the code and push the results to the remote with `git push`",
      "## Configure Husky and lint-staged",
      "Install husky and lint-staged",
      "```bash",
      "npm i husky lint-staged -D",
      "```",
      "- Add `lintstagedrc.json` to the root and configure:",
      "```json",
      "{",
      "  \"**/*.ts?(x)\": [\"prettier --write\", \"eslint\"],",
      "  \"**/*.(ts)?(x)\": \"npm run type-check\",",
      "  \"./*.md\": [\"prettier --write\"]",
      "}",
      "```",
      "_Note - The first and second points are similar, but they run in parallel to speed up the process._",
      "- Add new commands to the `package.json`",
      "```json",
      "{",
      "  \"lint-staged\": \"lint-staged\",",
      "  \"type-check\": \"tsc --project tsconfig.json --pretty --noEmit && echo \"",
      "}",
      "```",
      "- Setup the pre-commit hook with lint-staged",
      "```bash",
      "npx husky add .husky/pre-commit \"npm run lint-staged\"",
      "```",
      "- Change Prettier errors to warnings (from now on, they will be fixed automatically)",
      ".eslintrc.json:",
      "```json",
      " \"prettier/prettier\": [",
      "      \"warn\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "```",
      "- Commit the code and push the results to the remote with `git push`",
      "## Configure Jest",
      "- Install Jest and other dependencies for testing",
      "```bash",
      "npm i -D @types/jest jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom",
      "```",
      "- Create `jest.config.mjs` file in the root:`",
      "```js",
      "import nextJest from \"next/jest.js\";",
      "const createJestConfig = nextJest({",
      "  dir: \"./\",",
      "});",
      "/** @type {import('jest').Config} */",
      "const config = {",
      "  collectCoverageFrom: [",
      "    \"app/**/*.{js,jsx,ts,tsx}\",",
      "    \"!**/*.d.ts\",",
      "    \"!**/node_modules/**\",",
      "  ],",
      "  testEnvironment: \"jest-environment-jsdom\",",
      "  setupFilesAfterEnv: [\"<rootDir>/jest.setup.js\"],",
      "  testPathIgnorePatterns: [\"<rootDir>/node_modules/\", \"<rootDir>/.next/\"],",
      "};",
      "export default createJestConfig(config);",
      "```",
      "- Create `jest.setup.js` file in the root and configure:",
      "```js",
      "import \"@testing-library/jest-dom\";",
      "```",
      "- Update `tsconfig` file with",
      "```json",
      " \"include\": [ \"jest.setup.js\"]",
      "```",
      "- Update `package.json` with new test scripts",
      "```json",
      "{",
      "  \"test\": \"jest --coverage\",",
      "  \"test:w\": \"jest --watch\"",
      "}",
      "```",
      "- Write a simple test and verify that test works fine",
      "- Optionally setup husky to support testing on push:",
      "```bash",
      "npx husky add .husky/pre-push \"npm test\"",
      "```",
      "- Push the changes and observe the results",
      "- Commit the code and push the results to the remote with `git push`",
      "## Deploy",
      "Azure deployment helpers.",
      "- Update `next.config.js`:",
      "```js",
      "const nextConfig = {",
      "  output: \"standalone\",",
      "};",
      "```",
      "- Update the pipeline with a copy step (standalone mode does not include copying all the important files for an unknown reason).",
      "```yaml",
      " - name: copy files",
      "        run: |",
      "          cp -R .next/static .next/standalone/.next/static",
      "          cp -R ./public .next/standalone/public",
      "```",
      "- Update pipeline with propper path to the build:",
      "```yaml",
      " - name: Upload artifact for deployment job",
      "        uses: actions/upload-artifact@v2",
      "        with:",
      "          name: node-app",
      "          path: .next/standalone",
      "```",
      "- Update `package.json` with command to start the server",
      "```json",
      "{",
      "  \"start:azure\": \"node server\"",
      "}",
      "```",
      "- Update Azure to use `npm run start:azure` command to start the app on Prod",
      "## Extra options",
      "- Build on push - `npm run build`",
      "- Calculate [bundlesize](https://www.npmjs.com/package/bundlesize)",
      "- Install [webpackbundle analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer)",
      "- Setup E2E tests - [instruction](https://nextjs.org/docs/pages/building-your-application/optimizing/testing)",
      "[Ukrainian version](../create-new-nextjs-app-with-prettier-eslint-tests-ua/index.pug)"
    ],
    "header": "# How to create and configure Next.JS v.13 application with Prettier, Eslint, Husky and Jest",
    "preview": "This short instruction will guide you through creating a Next.js app, complete with Prettier, ESLint, Husky, and Jest configurations, and deployment on Azure. Learn how to set up a new project, configure Prettier and ESLint, use Husky for pre-commit hooks, write tests with Jest, and deploy your app to Azure for an optimized production environment."
  },
  {
    "name": "create-new-nextjs-app-with-prettier-eslint-tests-ua",
    "text": [
      "# Ð¯Ðº ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ ÑÐ° Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Next.JS v.13 Ð· Prettier, Eslint, Husky ÑÐ° Jest",
      "Ð¦Ñ ÐºÐ¾ÑÐ¾ÑÐºÐ° ÑÐ½ÑÑÑÑÐºÑÑÑ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð¶Ðµ Ð²Ð°Ð¼ ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Next.js Ð· ÐºÐ¾Ð½ÑÑÐ³ÑÑÐ°ÑÑÑÐ¼Ð¸ Prettier, ESLint, Husky ÑÐ° Jest, Ð° ÑÐ°ÐºÐ¾Ð¶ ÑÐ¾Ð·Ð³Ð¾ÑÐ½ÑÑÐ¸ Ð¹Ð¾Ð³Ð¾ Ð½Ð° Azure. ÐÑÐ·Ð½Ð°Ð¹ÑÐµÑÑ, ÑÐº Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ Ð¿ÑÐ¾ÐµÐºÑ, Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Prettier ÑÐ° ESLint, Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÐ²Ð°ÑÐ¸ Husky Ð´Ð»Ñ Ð¿ÐµÑÐµÐ²ÑÑÐºÐ¸ Ð¿ÐµÑÐµÐ´ ÐºÐ¾Ð¼ÑÑÐ¾Ð¼, Ð¿Ð¸ÑÐ°ÑÐ¸ ÑÐµÑÑÐ¸ Ð· Jest ÑÐ° ÑÐ¾Ð·Ð³Ð¾ÑÑÐ°ÑÐ¸ Ð²Ð°Ñ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Ð½Ð° Azure Ð´Ð»Ñ Ð¾Ð¿ÑÐ¸Ð¼ÑÐ·Ð¾Ð²Ð°Ð½Ð¾Ð³Ð¾ ÑÐµÑÐµÐ´Ð¾Ð²Ð¸ÑÐ° Ð²Ð¸ÑÐ¾Ð±Ð½Ð¸ÑÑÐ²Ð°.",
      "## ÐÐ¼ÑÑÑ",
      "- Ð¡ÑÐ²Ð¾ÑÑÑÐ¼Ð¾ Ð½Ð¾Ð²Ð¸Ð¹ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Next.JS",
      "- ÐÐ°Ð»Ð°ÑÑÐ¾Ð²ÑÑÐ¼Ð¾ Prettier",
      "- ÐÐ°Ð»Ð°ÑÑÐ¾Ð²ÑÑÐ¼Ð¾ Eslint",
      "- ÐÐ°Ð»Ð°ÑÑÐ¾Ð²ÑÑÐ¼Ð¾ Husky Ð· lint-staged",
      "- ÐÐ°Ð»Ð°ÑÑÐ¾Ð²ÑÑÐ¼Ð¾ ÑÐµÑÑÐ¸ Ð· Jest",
      "- ÐÑÐ¸Ð¼ÑÑÐºÐ¸ ÑÐ¾Ð´Ð¾ ÑÐ¾Ð·Ð³Ð¾ÑÑÐ°Ð½Ð½Ñ",
      "- ÐÐ¾Ð´Ð°ÑÐºÐ¾Ð²Ñ Ð¾Ð¿ÑÑÑ",
      "## ÐÐµÑÐµÐ´ Ð¿Ð¾ÑÐ°ÑÐºÐ¾Ð¼",
      "- ÐÐ¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÐ¹ÑÐµ ÐºÐ¾Ð½ÑÐ¾Ð»Ñ Ð´Ð»Ñ ÐºÑÐ°ÑÐ¾Ð³Ð¾ Ð´Ð¾ÑÐ²ÑÐ´Ñ Ð½Ð°Ð»Ð°Ð³Ð¾Ð´Ð¶ÐµÐ½Ð½Ñ, Ð¾ÑÐ¾Ð±Ð»Ð¸Ð²Ð¾ Ð´Ð»Ñ ÑÐ°Ð· ÐºÐ¾Ð¼ÑÑÑ ÑÐ° Ð½Ð°Ð´ÑÐ¸Ð»Ð°Ð½Ð½Ñ Ð· Husky.",
      "- ÐÐ°Ð¼ Ð¼Ð¾Ð¶ÑÑÑ Ð·Ð½Ð°Ð´Ð¾Ð±Ð¸ÑÐ¸ÑÑ Ð´Ð¾Ð´Ð°ÑÐºÐ¾Ð²Ñ ÐºÑÐ¾ÐºÐ¸ Ð² Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ Ð²ÑÐ´ Ð²Ð°ÑÐ¸Ñ Ð¿Ð¾ÑÑÐµÐ± ÑÐ° ÑÐ½ÑÑÑÑÐ¼ÐµÐ½ÑÑÐ².",
      "## Ð¡ÑÐ²Ð¾ÑÐµÐ½Ð½Ñ Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ NextJs",
      "- Ð¡ÑÐ²Ð¾ÑÑÑÑ ÐÐ£Ð¡Ð¢ÐÐ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¸Ð¹ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹ (GitHub, GitLab ÑÐ¾ÑÐ¾)",
      "- Ð¡ÑÐ²Ð¾ÑÑÑÑ Ð½Ð¾Ð²Ð¸Ð¹ Ð¿ÑÐ¾ÐµÐºÑ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾:",
      "```bash",
      "npx create-next-app@latest dev-blog",
      "```",
      "- ÐÑÐ´ÐºÐ»ÑÑÑÑÑ Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¸Ð¹ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ Ð³ÑÐ»ÐºÑ master:",
      "```bash",
      "git remote add origin https://github.com/Drag13/NextJS-express-course-app-mirror.git",
      "git branch -M master",
      "git push -u origin master",
      "```",
      "- ÐÐ¸Ð¿ÑÐ°Ð²ÑÐµ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ ÑÐ¾Ð·ÑÐ¾Ð±Ð½Ð¸ÐºÐ°, Ð¿ÐµÑÐµÐ¼ÑÑÑÐ¸Ð²ÑÐ¸ ÑÑ Ñ ÑÐ¾Ð·Ð´ÑÐ» ÑÐ¾Ð·ÑÐ¾Ð±Ð½Ð¸ÐºÐ°:",
      "```bash",
      "npm i @types/node @types/react @types/react-dom eslint eslint-config-next typescript -D",
      "```",
      "- ÐÐ°ÐºÐ¾Ð¼ÑÑÑÑÐµ ÐºÐ¾Ð´ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ¸ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÑ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ git push",
      "## ÐÐ°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ Prettier",
      "- ÐÐ¾Ð´Ð°Ð¹ÑÐµ prettier",
      "```bash",
      " npm i prettier eslint-config-prettier eslint-plugin-prettier -D",
      "```",
      "- ÐÐ°Ð»Ð°ÑÑÑÐ¹ÑÐµ prettier, Ð´Ð¾Ð´Ð°Ð¹ÑÐµ `prettierrc.json` Ð² ÑÑÑÐ¾Ð²Ñ Ð¿Ð°Ð¿ÐºÑ",
      "```json",
      "{",
      "  \"trailingComma\": \"es5\",",
      "  \"tabWidth\": 2,",
      "  \"semi\": true,",
      "  \"singleQuote\": true",
      "}",
      "```",
      "- ÐÐ¾Ð´Ð°Ð¹ÑÐµ prettier Ð´Ð¾ `.eslintrc.json`",
      "```json",
      "{",
      "  \"extends\": [\"next/core-web-vitals\", \"prettier\"],",
      "  \"plugins\": [\"prettier\"],",
      "  \"rules\": {",
      "    \"prettier/prettier\": [",
      "      \"error\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "  }",
      "}",
      "```",
      "- ÐÐ°ÐºÐ¾Ð¼ÑÑÑÑÐµ ÐºÐ¾Ð´ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ¸ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÑ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ `git push`",
      "## ÐÐ°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ EsLint",
      "- ÐÑÑÐ°Ð½Ð¾Ð²ÑÑÑ Ð¿Ð°ÑÑÐµÑ ÑÐ° Ð¿Ð»Ð°Ð³ÑÐ½",
      "```cmd",
      "npm i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react-hooks",
      "```",
      "- ÐÐ°Ð»Ð°ÑÑÑÐ¹ÑÐµ EsLint Ð½Ð° ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´Ð¾Ð²Ð°Ð½Ñ",
      "```json",
      "{",
      "  \"extends\": [",
      "    \"next/core-web-vitals\",",
      "    \"eslint:recommended\",",
      "    \"plugin:@typescript-eslint/recommended\",",
      "    \"plugin:react-hooks/recommended\",",
      "    \"prettier\"",
      "  ],",
      "  \"plugins\": [",
      "    \"prettier\",",
      "    \"@typescript-eslint\",",
      "    \"plugin:react-hooks/recommended\"",
      "  ],",
      "  \"parser\": \"@typescript-eslint/parser\",",
      "  \"rules\": {",
      "    \"prettier/prettier\": [",
      "      \"warn\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "  },",
      "  \"root\": true",
      "}",
      "```",
      "- ÐÐµÑÐµÐ²ÑÑÑÐµ eslint Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ npx `eslint .`",
      "- ÐÐ°ÐºÐ¾Ð¼ÑÑÑÑÐµ ÐºÐ¾Ð´ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ¸ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÑ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ `git push`",
      "## ÐÐ°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ Husky ÑÐ° lint-staged",
      "- ÐÑÑÐ°Ð½Ð¾Ð²ÑÑÑ husky ÑÐ° lint-staged",
      "```bash",
      "npm i husky lint-staged -D",
      "```",
      "- ÐÐ¾Ð´Ð°Ð¹ÑÐµ `lintstagedrc.json` Ð´Ð¾ ÐºÐ¾ÑÐµÐ½Ñ ÑÐ° Ð½Ð°Ð»Ð°ÑÑÑÐ¹ÑÐµ:",
      "```json",
      "{",
      "  \"**/*.ts?(x)\": [\"prettier --write\", \"eslint\"],",
      "  \"**/*.(ts)?(x)\": \"npm run type-check\",",
      "  \"./*.md\": [\"prettier --write\"]",
      "}",
      "```",
      "_ÐÑÐ¸Ð¼ÑÑÐºÐ° - Ð¿ÐµÑÑÐ¸Ð¹ ÑÐ° Ð´ÑÑÐ³Ð¸Ð¹ Ð¿ÑÐ½ÐºÑÐ¸ Ð¼Ð°ÑÑÑ Ð¾Ð´Ð½Ð°ÐºÐ¾Ð²Ñ Ð¿ÑÐ°Ð²Ð¸Ð»Ð° Ð²Ð¸Ð±Ð¾ÑÑ ÑÐ¾Ð·ÑÐ¸ÑÐµÐ½Ð½Ñ ÑÐ¼Ð¸ÑÐ½Ð¾, Ð´Ð»Ñ Ð¿ÑÐ¸ÑÐºÐ¾ÑÐµÐ½Ð½Ñ Ð¿ÑÐ¾ÑÐµÑÑ._",
      "- ÐÐ¾Ð´Ð°Ð¹ÑÐµ Ð½Ð¾Ð²Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¸ Ð´Ð¾ package.json",
      "```json",
      "{",
      "  \"lint-staged\": \"lint-staged\",",
      "  \"type-check\": \"tsc --project tsconfig.json --pretty --noEmit && echo \"",
      "}",
      "```",
      "- ÐÐ°Ð»Ð°ÑÑÑÐ¹ÑÐµ Ð¿ÐµÑÐµÐ²ÑÑÐºÑ Ð¿ÐµÑÐµÐ´ ÐºÐ¾Ð¼ÑÑÐ¾Ð¼ Ð· lint-staged",
      "```bash",
      "npx husky add .husky/pre-commit \"npm run lint-staged\"",
      "```",
      "- ÐÐ¼ÑÐ½ÑÑÑ Ð¿Ð¾Ð¼Ð¸Ð»ÐºÐ¸ Prettier Ð½Ð° Ð¿Ð¾Ð¿ÐµÑÐµÐ´Ð¶ÐµÐ½Ð½Ñ (Ð²ÑÐ´ÑÐµÐ¿ÐµÑ Ð²Ð¾Ð½Ð¸ Ð±ÑÐ´ÑÑÑ Ð²Ð¸Ð¿ÑÐ°Ð²Ð»ÑÑÐ¸ÑÑ Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐ½Ð¾)",
      ".eslintrc.json:",
      "```json",
      " \"prettier/prettier\": [",
      "      \"warn\",",
      "      {",
      "        \"endOfLine\": \"auto\"",
      "      }",
      "    ]",
      "```",
      "- ÐÐ°ÐºÐ¾Ð¼ÑÑÑÑÐµ ÐºÐ¾Ð´ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ¸ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÑ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ git push",
      "## ÐÐ°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ Jest",
      "- ÐÑÑÐ°Ð½Ð¾Ð²ÑÑÑ Jest ÑÐ° ÑÐ½ÑÑ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ Ð´Ð»Ñ ÑÐµÑÑÑÐ²Ð°Ð½Ð½Ñ",
      "```bash",
      "npm i -D @types/jest jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom",
      "```",
      "- Ð¡ÑÐ²Ð¾ÑÑÑÑ ÑÐ°Ð¹Ð» `jest.config.mjs` Ñ ÐºÐ¾ÑÐµÐ½ÐµÐ²ÑÐ¹ ÑÐµÑÑ:",
      "```js",
      "import nextJest from \"next/jest.js\";",
      "const createJestConfig = nextJest({",
      "  dir: \"./\",",
      "});",
      "/** @type {import('jest').Config} */",
      "const config = {",
      "  collectCoverageFrom: [",
      "    \"app/**/*.{js,jsx,ts,tsx}\",",
      "    \"!**/*.d.ts\",",
      "    \"!**/node_modules/**\",",
      "  ],",
      "  testEnvironment: \"jest-environment-jsdom\",",
      "  setupFilesAfterEnv: [\"<rootDir>/jest.setup.js\"],",
      "  testPathIgnorePatterns: [\"<rootDir>/node_modules/\", \"<rootDir>/.next/\"],",
      "};",
      "export default createJestConfig(config);",
      "```",
      "- Ð¡ÑÐ²Ð¾ÑÑÑÑ ÑÐ°Ð¹Ð» `jest.setup.js` Ñ ÐºÐ¾ÑÐµÐ½Ñ ÑÐ° Ð½Ð°Ð»Ð°ÑÑÑÐ¹ÑÐµ:",
      "```js",
      "import \"@testing-library/jest-dom\";",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ ÑÐ°Ð¹Ð» `tsconfig`:",
      "```json",
      " \"include\": [ \"jest.setup.js\"]",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ `package.json` Ð· Ð½Ð¾Ð²Ð¸Ð¼Ð¸ ÑÐºÑÐ¸Ð¿ÑÐ°Ð¼Ð¸ ÑÐµÑÑÑÐ²Ð°Ð½Ð½Ñ",
      "```json",
      "{",
      "  \"test\": \"jest --coverage\",",
      "  \"test:w\": \"jest --watch\"",
      "}",
      "```",
      "- ÐÐ°Ð¿Ð¸ÑÑÑÑ Ð¿ÑÐ¾ÑÑÐ¸Ð¹ ÑÐµÑÑ ÑÐ° Ð¿ÐµÑÐµÐ²ÑÑÑÐµ, ÑÐ¾ ÑÐµÑÑ Ð¿ÑÐ°ÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾",
      "- ÐÐ¾Ð´Ð°ÑÐºÐ¾Ð²Ð¾ Ð½Ð°Ð»Ð°ÑÑÑÐ¹ÑÐµ husky Ð´Ð»Ñ Ð¿ÑÐ´ÑÑÐ¸Ð¼ÐºÐ¸ ÑÐµÑÑÑÐ²Ð°Ð½Ð½Ñ Ð¿ÑÐ¸ Ð½Ð°Ð´ÑÐ¸Ð»Ð°Ð½Ð½Ñ:",
      "```bash",
      "npx husky add .husky/pre-push \"npm test\"",
      "```",
      "- ÐÐ°Ð´ÑÑÐ»ÑÑÑ Ð·Ð¼ÑÐ½Ð¸ ÑÐ° ÑÐ¿Ð¾ÑÑÐµÑÑÐ³Ð°Ð¹ÑÐµ Ð·Ð° ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ°Ð¼Ð¸",
      "- ÐÐ°ÐºÐ¾Ð¼ÑÑÑÑÐµ ÐºÐ¾Ð´ ÑÐ° Ð½Ð°Ð´ÑÑÐ»ÑÑÑ ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐ¸ Ð´Ð¾ Ð²ÑÐ´Ð´Ð°Ð»ÐµÐ½Ð¾Ð³Ð¾ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÑ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ `git push`:",
      "## ÐÑÐ½ÑÐ¼Ð°Ð»ÑÐ½Ð¸Ð¹ ÑÐ¾Ð·Ð¼ÑÑ Ð¿Ð¾ÐºÑÐ¸ÑÑÑ ÑÐµÑÑÐ°Ð¼Ð¸",
      "ÐÐ° Ð±Ð°Ð¶Ð°Ð½Ð½ÑÐ¼ Ð¼Ð¾Ð¶ÐµÐ¼Ð¾ ÑÐºÐ¾Ð½ÑÑÐ³ÑÑÑÐ²Ð°ÑÐ¸ Ð¼ÑÐ½ÑÐ¼Ð°Ð»ÑÐ½Ð¸Ð¹ ÑÐ¾Ð·Ð¼ÑÑ Ð¿Ð¾ÐºÑÐ¸ÑÑÑ ÑÐµÑÑÐ°Ð¼Ð¸. ÐÐ»Ñ ÑÑÐ¾Ð³Ð¾ Ð´Ð¾Ð´Ð°Ð¹ÑÐµ Ð½Ð¾Ð²Ñ ÑÐµÐºÑÑÑ Ð² `jest.config.mjs`:",
      "```javascript",
      " coverageThreshold: {",
      "    global: {",
      "      branches: 30,",
      "      functions: 30,",
      "      lines: 30,",
      "      statements: 30,",
      "    },",
      "  },",
      "```",
      "## Ð Ð¾Ð·Ð³Ð¾ÑÑÐ°Ð½Ð½Ñ",
      "ÐÐ¾Ð¿Ð¾Ð¼ÑÐ¶Ð½Ñ Ð·Ð°ÑÐ¾Ð±Ð¸ ÑÐ¾Ð·Ð³Ð¾ÑÑÐ°Ð½Ð½Ñ Azure",
      "- ÐÐ½Ð¾Ð²ÑÑÑ `next.config.js`:",
      "```js",
      "const nextConfig = {",
      "  output: \"standalone\",",
      "};",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ ÐºÐ¾Ð½Ð²ÐµÑÑ Ð· ÐºÑÐ¾ÐºÐ¾Ð¼ ÐºÐ¾Ð¿ÑÑÐ²Ð°Ð½Ð½Ñ (ÑÐµÐ¶Ð¸Ð¼ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½Ð¾Ñ ÑÐ¾Ð±Ð¾ÑÐ¸ Ð½Ðµ Ð¿ÐµÑÐµÐ´Ð±Ð°ÑÐ°Ñ ÐºÐ¾Ð¿ÑÑÐ²Ð°Ð½Ð½Ñ Ð²ÑÑÑ Ð²Ð°Ð¶Ð»Ð¸Ð²Ð¸Ñ ÑÐ°Ð¹Ð»ÑÐ² Ð· Ð½ÐµÐ²ÑÐ´Ð¾Ð¼Ð¸Ñ Ð¿ÑÐ¸ÑÐ¸Ð½).",
      "```yaml",
      " - name: copy files",
      "        run: |",
      "          cp -R .next/static .next/standalone/.next/static",
      "          cp -R ./public .next/standalone/public",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ package.json Ð· ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¾Ñ Ð´Ð»Ñ Ð·Ð°Ð¿ÑÑÐºÑ ÑÐµÑÐ²ÐµÑÐ°:",
      "```yaml",
      " - name: Upload artifact for deployment job",
      "        uses: actions/upload-artifact@v2",
      "        with:",
      "          name: node-app",
      "          path: .next/standalone",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ `package.json` Ð· ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¾Ñ Ð´Ð»Ñ Ð·Ð°Ð¿ÑÑÐºÑ ÑÐµÑÐ²ÐµÑÐ°",
      "```json",
      "{",
      "  \"start:azure\": \"node server\"",
      "}",
      "```",
      "- ÐÐ½Ð¾Ð²ÑÑÑ Azure, ÑÐ¾Ð± Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÐ²Ð°ÑÐ¸ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ npm run start:azure Ð´Ð»Ñ Ð·Ð°Ð¿ÑÑÐºÑ Ð´Ð¾Ð´Ð°ÑÐºÑ Ð½Ð° Prod",
      "## ÐÐ¾Ð´Ð°ÑÐºÐ¾Ð²Ñ Ð¾Ð¿ÑÑÑ",
      "- ÐÐ¾Ð½ÑÑÐ¾Ð»ÑÐ½Ð° Ð·Ð±ÑÑÐºÐ° Ð¿ÐµÑÐµÐ´ Ð½Ð°Ð´ÑÐ¸Ð»Ð°Ð½Ð½ÑÐ¼",
      "- ÐÐ¾Ð½ÑÑÐ¾Ð»Ñ ÑÐ¾Ð·Ð¼ÑÑÑ Ð±Ð°Ð½Ð´Ð»Ñ Ð· [bundlesize](https://www.npmjs.com/package/bundlesize)",
      "- ÐÐµÐ±Ð¿Ð°Ðº Bundle Analyzer [webpackbundle analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer)",
      "- E2E ÑÐµÑÑÐ¸ - [ÑÐ½ÑÑÑÑÐºÑÑÑ](https://nextjs.org/docs/pages/building-your-application/optimizing/testing)",
      "[ÐÐ½Ð³Ð»ÑÐ¹ÑÑÐºÐ° Ð²ÐµÑÑÑÑ](../create-new-nextjs-app-with-prettier-eslint-tests/index.pug)"
    ],
    "header": "# Ð¯Ðº ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ ÑÐ° Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Next.JS v.13 Ð· Prettier, Eslint, Husky ÑÐ° Jest",
    "preview": "Ð¦Ñ ÐºÐ¾ÑÐ¾ÑÐºÐ° ÑÐ½ÑÑÑÑÐºÑÑÑ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð¶Ðµ Ð²Ð°Ð¼ ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Next.js Ð· ÐºÐ¾Ð½ÑÑÐ³ÑÑÐ°ÑÑÑÐ¼Ð¸ Prettier, ESLint, Husky ÑÐ° Jest, Ð° ÑÐ°ÐºÐ¾Ð¶ ÑÐ¾Ð·Ð³Ð¾ÑÐ½ÑÑÐ¸ Ð¹Ð¾Ð³Ð¾ Ð½Ð° Azure. ÐÑÐ·Ð½Ð°Ð¹ÑÐµÑÑ, ÑÐº Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ Ð¿ÑÐ¾ÐµÐºÑ, Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°ÑÐ¸ Prettier ÑÐ° ESLint, Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÐ²Ð°ÑÐ¸ Husky Ð´Ð»Ñ Ð¿ÐµÑÐµÐ²ÑÑÐºÐ¸ Ð¿ÐµÑÐµÐ´ ÐºÐ¾Ð¼ÑÑÐ¾Ð¼, Ð¿Ð¸ÑÐ°ÑÐ¸ ÑÐµÑÑÐ¸ Ð· Jest ÑÐ° ÑÐ¾Ð·Ð³Ð¾ÑÑÐ°ÑÐ¸ Ð²Ð°Ñ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº Ð½Ð° Azure Ð´Ð»Ñ Ð¾Ð¿ÑÐ¸Ð¼ÑÐ·Ð¾Ð²Ð°Ð½Ð¾Ð³Ð¾ ÑÐµÑÐµÐ´Ð¾Ð²Ð¸ÑÐ° Ð²Ð¸ÑÐ¾Ð±Ð½Ð¸ÑÑÐ²Ð°."
  },
  {
    "name": "custom-typings",
    "text": [
      "# How to add custom types to the TypeScript project",
      "Working with TypeScript is very comfortable. It provides Intellisense, type-checking, and makes the developer's life much easier. But, sometimes, when I am using external libraries, I got a problem. They don't provide types or shipped types that are outdated. In this case, there is no other option but to define custom typings my own. Luckily, it's not that hard as you may expect.",
      "## Before we start",
      "Before you start adding custom types you need to ensure that there are no original types. Nowadays, packages that don't ship typings with themselves could be found under ```@types/package-name```. So, first of all - check ```@types```. And only if there is nothing suitable, create your own.",
      "## Create custom typings",
      "So, we need to create custom typings. Imagine that we are using library \"my-test-lib\" and need to provide types for it.",
      "```typescript",
      "import mainAnswer from 'my-test-lib';",
      "const answer = mainAnswer();",
      "console.log(answer);",
      "```",
      "Here is the example of the 3rd party code we will annotate:",
      "```js",
      "function main_answer() {",
      "  return 42;",
      "}",
      "module.exports = main_answer;",
      "```",
      "* Create a root folder for your types. You can give any name for it but let it be `types` for now.",
      "* Create `my-test-lib.d.ts` file inside the types folder (name also can be any, it doesn't matter)",
      "* Put this example inside the file",
      "```typescript",
      "declare module \"my-test-lib\" {",
      "  export default function main_answer(): number;",
      "}",
      "```",
      "That's it! Now it should work! The main trick is to **name module with the same name as library you want to annotate**. TypeScript is smart enough to automatically find your custom types, match module name with library name, and use types from the declaration.",
      "But sometimes this will not work.",
      "## Could not find a declaration file for module 'my-test-lib'",
      "You did everything right but tsc still failing with:",
      "![Could not find a declaration file for module error](./error.png)",
      "> \"Could not find a declaration file for module\".",
      "What is wrong? One of the reason might be that you are using include and/or files option in tsconfig.json, like here:",
      "```json",
      "  \"files\": [\"./src/index.ts\"]",
      "  \"include\": [\"./src\"],",
      "```",
      "In this case, TypeScript will not search for your types anywhere except node_modules and your src folder. And if you put types to the `.root/types` it will not pick up them. That's why you see this \"Could not find a declaration\" error. To fix this you need to include a folder with types, using include option, like this:",
      "```json",
      "\"include\": [\"./src\", \"./types\"],",
      "\"files\": [\"./src/index.ts\"]",
      "```",
      "Another reason, why you see this error might be because you are using the wrong tsconfig.json file. As an example, Angular creates several tsconfig.json files used for different purposes (testing, production build, etc). So, don't forget to check the correctness of the tsconfig files.",
      "## Few words about typeRoots",
      "What about \"typeRoots\"? Isn't this option should fix all issues? The quick answer is - no. Typeroots option was created [only for the backward compatibility](https://github.com/microsoft/TypeScript/issues/22217#issuecomment-370019383), so in certain circumstances, it might help but should be avoided if possible. However, VsCode uses this option to pick-up types for IntelliSense, so be aware :)",
      "## Troubleshooting",
      "TypeScript is much more complicated than we see. Sometimes, despite all efforts, types will no be applied. In this case, I would recommend using ```--traceResolution``` flag to check how tsc tried to resolve modules. This might save a couple of hours for you.",
      "Hope this helps, see you soon!"
    ],
    "header": "# How to add custom types to the TypeScript project",
    "preview": "Working with TypeScript is very comfortable. It provides Intellisense, type-checking, and makes the developer's life much easier. But, sometimes, when I am using external libraries, I got a problem. They don't provide types or shipped types that are outdated. In this case, there is no other option but to define custom typings my own. Luckily, it's not that hard as you may expect."
  },
  {
    "name": "how-turn-off-floc-javascript",
    "text": [
      "# How to opt-out Federated Learning of Cohorts (FLoC) using JavaScript",
      "![how to turn off FLoC using JavaScript](~/img/kdpv/how-to-optout-floc.png)",
      "## Federated Learning of Cohorts and default way to opt-out",
      "Federated Learning of Cohorts (FLoC) - is the [new way proposed by Google](https://github.com/WICG/floc) that allows Chrome to collect and share customers' personal information without the need for cookies. It uses the browser's history (which had never opened) and some other methods to group people into cohorts based on their interests and show them some ads which raise [some questions](https://www.eff.org/ru/deeplinks/2021/03/googles-floc-terrible-idea) about privacy.",
      "Introducing this technology, Google states that [FLoC will keep your privacy](https://github.com/WICG/floc#privacy-and-security-considerations), however some [concerns](https://brave.com/why-brave-disables-floc/) still exists. To give an option to fix this, Google provides the way to opt-out of the FLoC by using HTTP Header `Permissions-Policy` with the value `interest-cohort=()`.",
      "Unfortunately, this solution has a few issues:",
      "- Sometimes, you are not able to manipulate HTTP headers at all. As an example - using GitHub Pages, you are not able to set any custom HTTP header. Recently, GitHub added `Permissions-Policy` but only for the github.com domain. Disabling FLoC for GitHub pages with custom domains is still impossible (`meta-equiv` is not working for the `Permissions-Policy`).",
      "- The second issue is much more controversial, however, it's still not null. The fact is that the mechanism of turning FLoC on/off belongs to the organization with one of the highest [income](https://abc.xyz/investor/static/pdf/2019Q4_alphabet_earnings_release.pdf?cache=79552b8) comes from the ad. It's is not bad, but this means that at some point, Google may decide to change the mechanism turning FLoC off, ignore it or even remove it. I am not stating this will happen, but this seems possible.",
      "Such circumstances lead us to the necessity to have another way to turn FLoC off, and JavaScript is a perfect candidate.",
      "## How to Turn OFF FLoC using the JavaScript",
      "Luckily in the Web world, we can change a lot of things, and FLoC API is one of them. The `document.interestCohort()` method should be called when someone needs to get the user's cohort. This method exists in the `Document` prototype and can be overridden. If you get the descriptor of this property using `Object.getOwnPropertyDescriptor`, you should notice that it is writable, and we can substitute this property.",
      "Thus, an algorithm looks pretty simple:",
      "- Check if `interestCohort` API supported",
      "- If yes and rewriting is possible",
      "- - Create a proxy that will return rejected promise",
      "- - Substitute the original function with a newly created proxy",
      "- - Disable reconfiguring of the interestCohort property to disable recovering",
      "- If no - do nothing",
      "In JavaScript, this might look something like this:",
      "```js",
      "const cohorts = \"interestCohort\";",
      "const documentProto = Document.prototype;",
      "const flocSupported = cohorts in documentProto;",
      "if (!flocSupported) {",
      "  return;",
      "}",
      "const descriptor = Object.getOwnPropertyDescriptor(documentProto, cohorts);",
      "const writable = descriptor && descriptor.writable;",
      "if (writable) {",
      "  const proxy = new Proxy(documentProto[cohorts], { apply: () => Promise.reject() });",
      "  const config = {",
      "    writable: false,",
      "    value: proxy,",
      "    configurable: false,",
      "    enumerable: false,",
      "  };",
      "  Object.defineProperty(documentProto, cohorts, config);",
      "}",
      "```",
      "You can find the full version [here](https://github.com/Drag13/floc-off/blob/master/src/index.js).",
      "Of course, we can completely remove this method from the Document prototype, but this may lead to errors for those who use it, so I suggest faking it instead of deleting it.",
      "## Use case",
      "I found two cases when using this technic might be helpful.",
      "- You are not able to add HTTP headers. GitHub Pages for a custom domain is a perfect example for now. This [will change](https://twitter.com/drag137/status/1387425202125033476), I believe, but now you can disable FLoC only using JavaScript.",
      "- You don't trust that putting the Permissions-Policy HTTP header will prevent getting the user's data (as it was with the Do Not Track header).",
      "- You simply dislike Google ð",
      "For those who found these points reasonable, I wrote the tiny npm package named - [floc-off](https://www.npmjs.com/package/floc-off). It's minimal (287 bytes) and safe to use.",
      "Just install it using `npm i floc-off` and import it at the top of your entry file:",
      "\"`javascript",
      "import \"floc-off\";",
      "```",
      "That's it. The code is open-source and can be found in my [GitHub](https://github.com/Drag13/floc-off)",
      "As for my blog - I've disabled JavaScript completely using the [Content-Security-Policy](https://drag13.io/posts/security-headers/index.html), so your privacy is already safe here ð",
      "## Another opinion",
      "I also couldn't omit to mention another opinion about how to turn off the FLoC, described [in this article](https://seirdy.one/2021/04/16/permissions-policy-floc-misinfo.html) by Rohan Kumar. This article proposes a better option to turn off the FLoC:",
      "- Don't load untrusted third-party content that might get classified as an ad (only applies during the origin trial)",
      "- Don't call document.interestCohort(), and don't load third-party scripts that might call it either.",
      "Which is basically fair and will work in an ideal world. However, in the real world, you may have the Google Tag Manager script, some scripts from partners, or anything else that is out of your control. And yes, having all of this, you may still want to turn off the FLoC. Using ads doesn't automatically means that you allow them to show this ugly popup jumping right into the user's face, right? This case is similar - I still want to show ads, but I don't want to breach the user's privacy. For this case, this package can also help."
    ],
    "header": "# How to opt-out Federated Learning of Cohorts (FLoC) using JavaScript",
    "preview": "![how to turn off FLoC using JavaScript](~/img/kdpv/how-to-optout-floc.png)"
  },
  {
    "name": "nextjs-new-server-components",
    "text": [
      "# NextJs and new Server Components - How to use and limitations",
      "Hello everyone, recently I have spent a lot of time dealing with the new feature in [Next.JS](https://nextjs.org/) - server components, and now I want to share my experience and some thoughts about this update, including the benefits, limitations, and how to use them in real-life scenarios.",
      "If you are interested in Next.JS or web performance in general, grab a cup of coffee and let's start reading!",
      "## Why were server components introduced?",
      "Let's start with the most important question - **\"Why were server components introduced?\"**",
      "As you probably already know, Next.JS works as follows (simplified):",
      "- The client requests the address served by the Next.JS server.",
      "- Next.JS, at runtime (optimizations with caching may occur), receives the necessary data to create the page.",
      "- Then, it creates an HTML page that is sent to the client, along with the javascript code. Since the page is just plain HTML, the user sees it as it loads and, unlike SPA, doesn't have to wait for React to create it from scratch on the client-side.",
      "- After receiving the client bundle, the hydration process takes place - transforming static HTML into the familiar React application that the user can interact with. If hydration is not performed, the user won't be able to interact with the HTML page because all event listeners are added at this stage",
      "Schematically this looks something like this:",
      "![./default-schema.png](./default-schema.png)",
      "The reason for all this non-trivial process is to ensure that your users see the content they need as quickly as possible and doesn't leave your website frustrated. It also simplifies the life of SEO robots and increases the chances of your page ranking higher in search results. Meanwhile, the developer can work in the familiar and convenient React with all its advantages - a component approach, HMR, and a rich toolkit.",
      "Unfortunately this process has drawbacks, the biggest of which is that it takes time to hydrate, during which the application is non-interactive. The larger your bundle, the more time it takes to hydrate. There is even a possibility that the user has already loaded the page, tries to interact with it, but it doesn't respond because the main thread is busy. This leaves the impression that the page doesn't work at all, and people may just leave and tell their friends that your store doesn't work.",
      "The second drawback is that, as in hydration and the React application lifecycle, all components participate, even those whose content never changes. This, accordingly, reduces the response time of your page to user actions, which is bad for the user experience.",
      "And here come the server components to the rescue, which try to solve both problems at once by:",
      "- **Dependencies used in server components are not included in the bundle at all**. This reduces its size and speeds up the moment when your page becomes interactive.",
      "- **Server components do not participate in either hydration or the application lifecycle**, which speeds up the application's response time (giving more time for other operations) and saves your phone's battery.",
      "Of course, such magic is not free, so server components have significant limitations (some of which almost completely negate their usefulness, at least for now).",
      "## Rules and limitations of server components",
      "**The first rule of server components** is that server components cannot have added behavior such as useState, useEffect, onClick, and other interactive features. This is logical since server components cannot be changed on the client-side. If you still need some behavior, you need client components. Regular functions, including fetch, are allowed. But keep in mind that server components run on the server, so they cannot access the browser API, window, and document objects. Another interesting point is that native interactivity of elements has not disappeared, so forms, checkboxes, radio buttons, links, summary, and all other components with built-in behavior will work fine.",
      "Also, server components cannot use context, which means that many familiar tools built on context - such as Redux Toolkit, Emotion, and even the popular MUI component library - do not work with server components. And this, in my opinion, is the biggest and most significant drawback of server components, which almost negates all their benefits. However, there is an experimental server context, but it is not yet used by third-party libraries and does not work correctly during navigation.",
      "**The second rule of server components** is that all components are considered server components until otherwise stated. If you need a client component, you must add the 'use client' directive at the beginning of the file with the components, before all imports.",
      "**The third rule of server components** is that importing a server component to the client automatically transforms it into a client component, thereby depriving it of all the advantages I mentioned above. This moment is very important, so I emphasize it again: any server components imported into a client component are automatically converted into client components. This effect is transitive - sub-components also become client components automatically, and so on until the last component in the hierarchy.",
      "The practical consequence of this is that if you add the `\"use-client\"` directive to your root component (such as a page), all its imports and the imports of their imports will automatically be converted to client components, which will still be rendered on the server-side but lose the benefits of server components, such as reduced bundle size and avoiding re-rendering; therefore, the `\"use-client\"` directive should be used as low in the import hierarchy as possible, or alternatively, you can use children in client components, as long as the composing component is a server component because there is no direct import.",
      "**Finally, the fourth rule of server components** is that they can be asynchronous and can receive data directly in the component body, without any useEffect. Then, this data can be processed and passed to the client components, which can create context and add some interaction. And for handling errors that occur during asynchronous operations, you can add an error.jsx/tsx file. This is quite convenient and slightly improves the impression of all previous limitations, but not much.",
      "## Wrapping up",
      "In summary, the technology of server components has the potential to make your applications faster by reducing the bundle size. However, the inability to use context and libraries built on it almost completely negates their usefulness in the real world. Even if your page is completely static but uses a popular CSS in JS library like Emotion for styling, you cannot fully utilize server components - at best, you can use them as a container for convenient data retrieval, but obviously, this is not what developers had in mind when they added server components.",
      "Thanks for the attention!",
      "## UPDATE",
      "[Material UI](https://github.com/mui/material-ui/releases/tag/v5.14.0) version 5.14.0 has announced support for the new app router in Next.js and updated their guides:",
      "![./mui.png](./mui.png)",
      "Hopefully, we will see some progress with other tools soon"
    ],
    "header": "# NextJs and new Server Components - How to use and limitations",
    "preview": "Hello everyone, recently I have spent a lot of time dealing with the new feature in [Next.JS](https://nextjs.org/) - server components, and now I want to share my experience and some thoughts about this update, including the benefits, limitations, and how to use them in real-life scenarios."
  },
  {
    "name": "perfrunner-intro",
    "text": [
      "# Perfrunner - automated tool to track your website speed changes",
      "![perfrunner intro image](~/img/kdpv/perfrunner-intro.jpg)",
      "## Quick intro",
      "A few months ago I worked on performance improvements for one React-based web application. I tried different tricks to improve initial application loading and I was really annoyed with the way of testing my changes. I had to launch the application several times to get average results. I had to repeat all launches against at least two types of networks (4g and my current). And I had to repeat abovementioned tests once again for cache and cache-less scenarios. For the one single change, I had to run at least 12 tests. Needless to say, this was not fun.",
      "I decided that I don't want to do this anymore and this is how the [Perfrunner](https://github.com/Drag13/perfrunner) appeared.",
      "Perfrunner is a simple automated, CLI based tool that helps you track website performance changes. It collects some useful performance metrics like first and largest-contentful-paint, loaded resource size, and reports them back to you. The cool part is that Perfrunner does not only a single run but a series of runs against different networks, cache, and CPU conditions to give you as much information as possible!",
      "In other words, Perfrunner loads your application several times (3 by default) against each condition, calculates average results, and displays you the difference between all previous runs. You don't have to run them manually or calculate difference anymore, it is all automated!",
      "## Demo",
      "Let's start from a simple demo.",
      "First things first, you need to install Perfrunner and add launch script to the package.json file:",
      "```cmd",
      "npm i perfrunner -D",
      "```",
      "```json",
      "{",
      "  \"scripts\": {",
      "    \"perfrunner\": \"perfrunner\"",
      "  }",
      "}",
      "```",
      "and run Perfrunner to get inital data.",
      "```cmd",
      "npm run perfrunner https://drag13.io",
      "```",
      "Now, change something that might affect performance (I added jQuery to the top of the page) and run Perfrunner one more time. Open folder named `generated/{your_site_name}` and then open a `default-report.html` file.",
      "It will look like this (clickable):",
      "<a href=\"./original.png\" target=\"_blank\" ><img alt=\"Perfrunner report for original network, 25ms diff for largest-contentful-paint\" src=\"./original.png\"/></a>",
      "In this report you will see at least four different charts:",
      "- Application Events with `First-Paint`, `First-Contentful-Paint`, `Largest-Contentfult-Paint`, `DomContentLoaded` and `DomInteractive` events",
      "- Common performance metrics like `Layout Duration`, `Script Duration` and `Recalculate Style Duration`",
      "- Size of the resources loaded before the First-Contentful-Paint event",
      "- All resources size",
      "If you are using performance marks, you will also get marks chart as well.",
      "But what is perhaps the most important point, you can switch to the second tab and see how your changes affect the performance for another network/CPU/cache conditions:",
      "<a href=\"./fast3g.png\" target=\"_blank\" ><img alt=\"Perfrunner report for original network, 25ms diff for largest-contentful-paint\" src=\"./fast3g.png\"/></a>",
      "As you can see, for the fast-3G network, the First-Contentful-Paint event appeared 75 ms later than for the regular network.",
      "You can also instruct Perfrunner to use additional network conditions, like `slow-3g` or `regular-4g`:",
      "```cmd",
      "npm run perfrunner http://drag13.io -- --network slow-3g fast-3g hspa regular-4g online",
      "```",
      "or you can do testing against cached or not cached resources:",
      "```cmd",
      "npm run perfrunner http://drag13.io -- --cache true false",
      "```",
      "And of course you can combine different options together to get as much information as you need:",
      "```cmd",
      "npm run perfrunner http://drag13.io -- --network slow-3g fast-3g hspa regular-4g online --cache true false",
      "```",
      "Apart from network conditions, Perfrunner also supports CPU throttling with -T flag:",
      "```cmd",
      "npm run perfrunner http://drag13.io -- -T 8",
      "```",
      "This will set 8x throttling for your CPU. It is useful when you want to test your changes against slow devices.",
      "For more available options, please check [readme](https://github.com/Drag13/perfrunner/tree/development/packages/perfrunner-cli#all-options)",
      "## Advanced tricks",
      "Perfrunner is more flexible than it appears at first sight. First of all, if you don't want default-html reporter, you can switch it to CSV or JSON format, using `--reporter` flag. You also can write your own reporter and use it with option:",
      "```",
      "npx perfrunner http://drag13.io --reporter my-custom-reporter.js",
      "```",
      "where reporter should look like:",
      "```js",
      "module.exports = (outputFolder, data, args) =>",
      "  console.log(outputFolder, JSON.stringify(data), args);",
      "```",
      "Another useful trick is that Perfrunner also collects all Chrome traces from every test run. If you will need more detailed information, you can open `generated/{your_site_name/traces}` and get all the additional information you need.",
      "## Troubleshooting.",
      "Perfrunner is based on [puppeteer](https://github.com/puppeteer/puppeteer), so it has all weaknesses and advantages of it. If you struggle with launching Perfrurunner, please visit [troubleshooting](https://developers.google.com/web/tools/puppeteer/troubleshooting) page. From my side, Perfrunner supports `--chrome-args` and `--ignore-default-args` flags. It also supports `--executablePath`, so you can launch Perfrunner on your own Chrome instance if nothing else helps.",
      "## Final words",
      "Summarizing, Perfrunner is a great tool to quickly check your performance improvements. It supports various network conditions, CPU throttling, and much more. If you have any questions, suggestions, or found an issue, feel free to visit [github](https://github.com/Drag13/perfrunner/issues) or contact me on [twitter](https://twitter.com/drag137).",
      "Wish you the fastest app!",
      "Thanks @veri-ivanova for the main image"
    ],
    "header": "# Perfrunner - automated tool to track your website speed changes",
    "preview": "![perfrunner intro image](~/img/kdpv/perfrunner-intro.jpg)"
  },
  {
    "name": "react-inline-runtimer-chunk",
    "text": [
      "# How to use React without unsafe-inline and why",
      "![react and content-security-policy](~/img/kdpv/react-security.png)",
      "React.JS is an awesome library that widely used all over the world. However, it also contains some pitfalls that might negatively impact your application. And here I want to discuss one of such pitfalls - inlined runtime chunk that might prevent you from correct using one of the most useful security header - Content-Security-Policy.",
      "## Identifing the issue",
      "Let's start. If you have ever opened the output index.html, you've probably already seen something like this:",
      "```html",
      "...",
      "<!--index.html-->",
      "<div id=\"root\"></div>",
      "<script>!function (e) { function r(r) { for (var n, l, f = r[0], i = r[1], a = r[2], c = 0, s = []; c < f.length; c++)l = f[c], Object.prototype.hasOwnProperty.call(o, l) && o[l] && s.push(o[l][0]), o[l] = 0;}</script>",
      "<script src=\"/static/js/2.1478fb8e.chunk.js\"></script>",
      "...",
      "```",
      "What is this first piece of code? It is a small chunk of webpack runtime logic which is used to load and run your application. It is safe (at least for now), already optimized, and minified. If you remove or alter it, your application will be broken. Despite all of this, the fact it uses an inline technique might bring you some trouble if you start improving your application with [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) HTTP header. For those, who already CSP Header, the problem should be obvious, but if you are not familiar with this technique, I will explain a bit more.",
      "A long time ago when [netscape](https://en.wikipedia.org/wiki/Netscape_Navigator) was young, we didn't have any mechanism to define trusted sources browser may use safely. If the browser see the script tag, it evaluates it and executes it. If the browser see a script with src, it loads it and executs it. If the browser see an image ... you understand, it loads image and renders it. Despite (or because) the simplicity, this behavior opens door to some troubles like [XSS](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting).",
      "However, times changed. Nowadays we can control what sources are trusted and what resources can be used by the browser. This is done by the HTTP Header named Content-Security-Policy. This header defines whitelists the trusted sources:",
      "```",
      "Content-Security-Policy: default-src 'self';",
      "```",
      "In this example, the server, using Content-Security-Policy header, dictates to the browser to use resources only from the same domain index.html was loaded from. If an attacker will find XSS vulnerability and embed some script inside the page, the browser will refuse to load it, because loading scripts from other domains already forbidden. And if attacked embed plain javascript on the page, payload will also not work. Because inline resources required special permission - unsafe-inline.",
      "```",
      "Content-Security-Policy: default-src 'self'; script-src 'unsafe-inline';",
      "```",
      "This header is so cool, that it can also forbidd [eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) which makes this header really great against different types of injection-based attacks. If you are interested in some details, here you can find more about Content-Security-Policy and some other useful security headers - [https://drag13.io/posts/security-headers](https://drag13.io/posts/security-headers/index.html).",
      "Now you should see the issue. If you decide to protect your site with CSP-Header (and I highly recommend doing this), you will have to allow unsafe-inline, because, in another case, React will just not work. Which in turn, leaves the door open to other, potentially malicious, inlinings.",
      "## Making the decision",
      "Now, when you see the issue, what can you do?",
      "* Use [nonce](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src) attribute. However it requires some backend (nonce should be cryptographically secure random token) and Edge had some bugs related to it. So this might be plan B.",
      "* Opt-out from using unsafe runtime script inlining. The good news is that this option is already supported with INLINE_RUNTIME_CHUNK variable and it is quite easy to set up it. To use react without unsafe inline code, you need set ```INLINE_RUNTIME_CHUNK``` to false, like here:",
      "```json",
      "/*package.json*/",
      "\"build\": \"(SET INLINE_RUNTIME_CHUNK=false) && react-scripts build\",",
      "```",
      "Or just use add INLINE_RUNTIME_CHUNK=false to the [.env](https://create-react-app.dev/docs/adding-custom-environment-variables/) file. Now your inlined chunk will be moved out of the index.html. However this is not end. Except runtime chunk, react also inlines images that are smaller then 10kB. Inlined images are also forbidden by default with CSP header. You may leave this or setup React not to include images inside the bundle.  Just add",
      "```IMAGE_INLINE_SIZE_LIMIT=0``` to your .env file and that's it.",
      "Now you can use React.JS application with CSP header without unsafe-inline (of course if you don't have other inlined code).",
      "But what about performance? When we move the runtime-chunk out from the index.html, doesn't it slow the application loading? I was also wondering about this. So, I created a simple web application in Azure (B1 tier actually), built default React application, and did a couple of tests with [perfrunner](https://www.npmjs.com/package/perfrunner). And here is what I've found",
      "## Profiling",
      "### First visit",
      "![chart with first visit test](./first-visit.png)",
      "### Cache enabled",
      "![chart with caching test](./cache-enabled.png)",
      "As you can see, allmost no difference appears. If you prefer to check raw numbers, here are the results:",
      "| | 3G first-visit | | 4G  first-visit| | 3G cache| | 4G cache| |",
      "|--| --| -- | -- | --| -- | -- | ---| --|",
      "| | FCP | LCP | FCP | LCP | FCP | LCP | FCP | LCP |",
      "|Inlined| 1532  | 2126 | 307 | 383 | 732 | 732 | 236 | 236 |",
      "|Cached| 1545 | 2142 | 301 | 370 | 729 | 729 | 217 | 217 |",
      "So, from performance perspective, using fetched runtime chunk also seems safe.",
      "## Summary",
      "Making React applications compliant with Content-Security-Policy is easy and can be done with a few simple settings in the .env file - ```IMAGE_INLINE_SIZE_LIMIT``` and ```INLINE_RUNTIME_CHUNK```. Despite the simplicity, it still requires careful verification of everything connected to the security.",
      "Hope this helps,",
      "// [Drag13](https://drag13.io/)"
    ],
    "header": "# How to use React without unsafe-inline and why",
    "preview": "![react and content-security-policy](~/img/kdpv/react-security.png)"
  },
  {
    "name": "react-performance-puppeteer-limits",
    "text": [
      "# Performance testing on a slow network and weak CPU using Puppeteer and React",
      "In the [previous article](https://drag13.io/posts/react-performance-puppeteer-profile) I've shown how to extract performance metrics from the React-based application using Puppeteer. We got ScriptDuration, Contentful Paint, Time To First Byte, Largest Contentful Paint, and other metrics. I also showed how to extract custom performance events using the `performance` API. ",
      "Today we will take a look into various testing conditions you might consider applying. We will set up the network limitations to simulate a slow 3g network, and we also will limit the CPU power to get a better understanding of how our application behaves on weak devices. Also, I will show how to test cache and cache-less scenarios to get performance metrics for the first visit and the next one. As an example, I will use the same React application as previously, however, this will work the same way for Angular, Vue, or classical website.",
      "## Testing the application on a slow network",
      "While developing, we usually have pretty good equipment - fast and stable network, fast laptops with enough memory. However, this might do not apply to the end-users. As an example, according to the [latest statistics](https://www.opensignal.com/sites/opensignal-com/files/data/reports/pdf-only/data-2020-05/state_of_mobile_experience_may_2020_opensignal_3_0.pdf), mobile internet varies from 0.54MBit/s in Tanzania to 59.6MBit/s in Canada.",
      "And this is something we might forget while developing. Thus, if your product will be used worldwide, performance testing with network limitations is more than crucial for you. Luckily it's a pretty easy task.",
      "First of all, we need to define the network conditions that should be applied. Right now we can set up `downloadThroughput`, `uploadThroughput` and `latency`. For example, a slow 3g network will look something like this:",
      "```javascript",
      "const slow3g = {",
      "  offline: false,",
      "  downloadThroughput: (0.4 * 1024 * 1024) / 8,",
      "  uploadThroughput: (0.4 * 1024 * 1024) / 8,",
      "  latency: 2000,",
      "};",
      "```",
      "The next step is to apply this configuration while testing. This task is also pretty simple and consists of  3 steps:",
      "- Create CDP sesstion using `createCDPSession` (we will also reuse it for other purposes)",
      "- Turn ON network using `.send(\"Network.enable\")`",
      "- Send configuration using `.send(\"Network.emulateNetworkConditions\", slow3g)`",
      "Working example:",
      "```typescript",
      "// create CDP session",
      "const pageSession = await page.target().createCDPSession();",
      "// turn ON network",
      "await pageSession.send(\"Network.enable\");",
      "// configure network",
      "await pageSession.send(\"Network.emulateNetworkConditions\", {",
      "  offline: false,",
      "  downloadThroughput: (0.4 * 1024 * 1024) / 8,",
      "  uploadThroughput: (0.4 * 1024 * 1024) / 8,",
      "  latency: 2000,",
      "});",
      "```",
      "Now, if you run `npm run e2e` you will see pretty many differences between the vanilla test and test with simulated 3g network:",
      "| Case     | appRendered | FCP    | lcp:   | TaskDuration |",
      "| -------- | ----------- | ------ | ------ | ------------ |",
      "| Original | 82ms        | 123ms  | 139ms  | 0.068ms      |",
      "| Slow3g   | 5055ms      | 5087ms | 7135ms | 0.068ms      |",
      "As you can see, the appRendered metrics grew more than 61X. What is also worth mentioning, that TaskDuration metrics stay the same because we only limited the network and the compute power remains the same.",
      "Of course, you may apply any network conditions (4g, WiFi) you feel are suitable for your product. Some extra examples can be found [here](https://raw.githubusercontent.com/Drag13/perfrunner/master/packages/perfrunner-cli/src/config.ts).",
      "## Testing the application on with CPU throttling",
      "As you might already know, 55% of the page views in 2021 were done through mobile phones. Currently, the are around 5 280 000 000 mobile devices in use around the world. And most of them are not that powerful as a developer laptop. Frankly speaking, their CPU is pretty weak and comparable to the Octa-core 1.4 GHz Cortex-A53. This leads us to the situation when the application will work slowly with perfect network conditions because of intensive CPU operations like JS parsing, JS execution, force reflows, and such other expensive stuff.",
      "And of course, there are a bunch of cheap or outdated laptops that you also might want to cover. This leads us to the importance of testing for the weak CPU conditions, and the good news is that this is an even easier task than the previous.",
      "All you need is to set throttling rate using `pageSession.send('Emulation.setCPUThrottlingRate', config}`. The only possible caveat is - not possible to set up exact CPU power (frequency, cache, etc), you can only throttle your current CPU in 2-3-4-X times:",
      "```ts",
      "await pageSession.send(\"Emulation.setCPUThrottlingRate\", { rate: 4 });",
      "```",
      "Test results with the throttling will look like this:",
      "| Case         | appRendered | FCP    | lcp:   | TaskDuration |",
      "| ------------ | ----------- | ------ | ------ | ------------ |",
      "| Original     | 82ms        | 123ms  | 139ms  | 0.068ms      |",
      "| Slow3g       | 5055ms      | 5087ms | 7135ms | 0.068ms      |",
      "| Slow3g+CPUx4 | 5201ms      | 5325ms | 7336ms | 0.332ms      |",
      "Note that TaskDuration timing increased 4.9 times which naturally affects all other metrics.",
      "## Testing the application with and without caching",
      "Before this point, we worked with the cacheless scenario. However, this was done unintentionally - we used a new browser instance for each test. In the real world, you might want to run a series of tests and it might be beneficial if we could control caching strategy. For this purposes, Puppeteer has special API - `setChacheEnabled` and `Network.setCacheDisabled` command. Altogether this looks like this:",
      "```ts",
      "await page.setCacheEnabled(false);",
      "await pageSession.send(\"Network.setCacheDisabled\", { cacheDisabled: true });",
      "```",
      "Now you can dictate to the browser use cache or not. That's it, pretty simple, yeah? If you want to test application performance with cache - just do the extra load without measuring and then do regular testing. ",
      "One more note - sometimes you might see huge differences between the first and others test runs. In this case, I would recommend executing a single page load to \"warm-up\" the browser before testing. This slightly increases overall test duration however might produce more accurate results.",
      "## Summary",
      "Today I've shown how to measure web application performance in various conditions - weak network conditions, slow CPU, and disabling the browser cache. As you can see, this is absolutely doable and might bring you some extra insights about your solution. For the complete example, please take a look into the [example repo](https://github.com/Drag13/react-performance-puppeteer-profile). If you have any questions - feel free to contact me via [Twitter](https://twitter.com/drag137)",
      "Cya!"
    ],
    "header": "# Performance testing on a slow network and weak CPU using Puppeteer and React",
    "preview": "In the [previous article](https://drag13.io/posts/react-performance-puppeteer-profile) I've shown how to extract performance metrics from the React-based application using Puppeteer. We got ScriptDuration, Contentful Paint, Time To First Byte, Largest Contentful Paint, and other metrics. I also showed how to extract custom performance events using the `performance` API. "
  },
  {
    "name": "react-performance-puppeteer-profile",
    "text": [
      "# How to get performance metrics and web vitals using Puppeteer, React and TypeScript, Part 1",
      "![How to get performance metrics and web vitals using Puppeteer, React and TypeScript, part 1](~/img/kdpv/react-performance-puppeteer-profile-kdpv.jpg)",
      "In this article, I will demonstrate how to build the script to automate gathering performance metrics like First Contentful Paint and Core Web Vitals from the React-based application using Puppeteer and TypeScript. I will also describe how to create and extract your own performance events using the React Profiler component. This might be useful if you decide to do some performance research or implement advanced performance testing into your CI/CD pipeline.",
      "## The Plan",
      "Because of the large amount of material and code, I will split the content into two parts. The first one (this one) will be about gathering performance metrics and the second one will be about various test conditions like CPU and network. Here are the main points I will cover:",
      "Part #1:",
      "- Create a new React.JS project and install required dependencies for performance measuring",
      "- Extract ScriptDuration, LayoutDuration, JSHeapUsedSize, and other metrics provided by Puppeteer API",
      "- Extract First Contentful Paint and Time to First Byte from performance events",
      "- Extract Largest Contentful Paint using the PerformanceObserver API",
      "- Use web-vitals library to get Core Web Vitals metrics",
      "- Emit and extract custom performance event using performance API and React Profiler component",
      "Part #2:",
      "- Change network and CPU conditions",
      "- Cached and No-Cache strategy",
      "- Emulating different devices",
      "- Final wrap up",
      "## Initial setup with React.JS and Puppeteer",
      "First, we need to prepare the workspace. You can use an already existed application (better to take something React-based if you want to use Profiler component, however, all code will work for Angular, Vue, or vanilla JS application) or create something from scratch. Also, you will need to install some extra dependencies to be able to profile the application. You can also clone the [demo repository](https://github.com/Drag13/react-performance-puppeteer-profile) and use it directly.",
      "Install the application, [puppeteer](https://www.npmjs.com/package/puppeteer) for running tests, [serve](https://www.npmjs.com/package/serve) to host the application, [start-server-and-test](https://www.npmjs.com/package/start-server-and-test) to automate launching the application, [TypeScript](https://www.typescriptlang.org/) and [ts-node](https://www.npmjs.com/package/ts-node) to run the written script. If you already using TypeScript in your project - install only the ts-node.",
      "```cmd",
      "npx create-react-app perf",
      "cd perf",
      "npm i puppeteer serve ts-node typescript start-server-and-test -O",
      "```",
      "Note, that I am using the `-O` flag to install performance-related dependencies as optional. This gives me the possibility to skip them using `npm ci --no-optional` command for the scenarios where they are not needed and saves me some build time.",
      "Now create the new folder named e2e and put an empty index.ts file. Update the `package.json` with next scripts:",
      "```json",
      "\"scripts\":{",
      "    \"serve\": \"serve ./build\",",
      "    \"ts-node\": \"ts-node\",",
      "    \"tsc\": \"tsc\",",
      "    \"e2e:run\": \"ts-node --project e2e/tsconfig.json --files e2e/index.ts\" ,",
      "    \"e2e\": \"start-server-and-test serve http://localhost:5000 e2e:run\"",
      "}",
      "```",
      "Initialize new tsconfig file with `npm run tsc -- --init`, **put it into the e2e folder** and build the application using `npm run build`. Now launch the application using `npm e2e` command. At this point, your application will start and empty index.ts executed without any result. Time to fill it with some code!",
      "## How to get default performance metrics from the Puppeteer",
      "Getting some of the performance metrics like script duration, heap size, and couple of others is really simple because of the API that already provided by the Puppeteer. The algorithm is simple - using Puppeteer we are launching Chrome, then navigating to the page we want to profile, wait for the load, and finally, dump required metrics. From the code perspective it will look like this:",
      "```typescript",
      "import { launch } from \"puppeteer\";",
      "// url to inspect",
      "const pageUrl = \"http://localhost:5000\";",
      "(async function (url) {",
      "  let browser;",
      "  try {",
      "    // launch the Chrome browser without Sandbox (might help if puppeteer not working)",
      "    browser = await launch({ product: \"chrome\", args: [\"--no-sandbox\"] });",
      "    // launch the page",
      "    const page = await browser.newPage();",
      "    // navigate to the url and wait untill all network activity stops",
      "    await page.goto(url, { waitUntil: \"networkidle0\" });",
      "    // dump page metrics",
      "    const metrics = await page.metrics();",
      "    console.log(metrics);",
      "  } catch (error) {",
      "    console.error(error);",
      "  } finally {",
      "    // close the browser correctly even if something went wrong",
      "    browser != null && (await browser.close());",
      "  }",
      "})(pageUrl);",
      "```",
      "The output will look like this:",
      "```js",
      "{",
      "  Timestamp: 20956.347834,",
      "  Documents: 5,",
      "  Frames: 2,",
      "  JSEventListeners: 136,",
      "  Nodes: 51,",
      "  LayoutCount: 3,",
      "  RecalcStyleCount: 5,",
      "  LayoutDuration: 0.021509,",
      "  RecalcStyleDuration: 0.000924,",
      "  ScriptDuration: 0.01118,",
      "  TaskDuration: 0.054886,",
      "  JSHeapUsedSize: 2377752,",
      "  JSHeapTotalSize: 3198976",
      "}",
      "```",
      "There are 13 different metrics but the most interesting are:",
      "- ScriptDuration - the amount of time in milliseconds how much time the browser spent on javascript **parsing** and **executing**. If numbers here really big this means that you have either the big amount of JavaScript on the page or it runs too much, and you should consider code splitting. For the mobiles from low segments, a huge\\* amount of JavaScript may be a pure disaster because parsing JavaScript is not something simple. Even if you have very fast internet, JavaScript still may block content from rendering or increase time to interact.",
      "- LayoutDuration - the amount of time in milliseconds how much time the browser spent on construction layout. If it starts rapidly growing, this signalizes that your markup is overcomplicated or big.",
      "- JSHeapUsedSize - the amount of memory in bytes the application is using. Again, this is important for the cheap mobiles that have a little amount of memory. If you are targeting this audience this metric is crucial for you.",
      "Other metrics are also useful (notice RecalcStyleCount), but let's skip them at this tutorial.",
      "\\*Regarding the [latest researches](https://infrequently.org/2021/03/the-performance-inequality-gap/) done in the 2021 year current budget for mobile devices is about **100KiB of HTML/CSS/fonts and ~300-350KiB of JS**. This is bigger than we have previously but still not much, thus if you see 1MB of gzipped JavaScript it's time for some questions ð¤",
      "However, already gathered data not even close to the list we want to have. The most popular metrics like First Contentful Paint, Largest Contentful Paint, and Time to Interactive missing. We need to go deeper.",
      "## How to get First Contentful Paint",
      "The First Contentful Paint event is part of the Web Vitals performance events and indicates when a user starts seeing any part of the content (text, image, canvas, etc.). Recommended value is 1.8 seconds. To get this metric we will use the browser's `performance` API:",
      "```typescript",
      "// Get performance entries",
      "const rawPerfEntries = await page.evaluate(function () {",
      "  return JSON.stringify(window.performance.getEntries());",
      "});",
      "// Parsing string",
      "const allPerformanceEntries = JSON.parse(rawPerfEntries);",
      "// Find FirstContentfulPaing",
      "const fcp = allPerformanceEntries.find((x) => x.name === \"first-contentful-paint\");",
      "console.log(fcp);",
      "```",
      "The variable `allPerformanceEntries` will contain the array with most (but not all) performance events that happened on the page. If you explore this array, you will see:",
      "- Navigation event (get it using `.find(x=>x.entryType ==='navigation')`). This event contains such important timings like `domComplete`, `domContentLoadedEventEnd`, `domainLookupStart`, `domainLookupEnd` and others. It also contains server timings if your server supports them. For this example, I will use this entry to get one of the webvitals metrics - Time to First Byte.",
      "- All timings related to each, and every resource fetched by the page. This mean you can find information about how much time it took to download your bundle or styles or calculate the size of the resources - might be useful if you want to track resources size.",
      "- All custom performance events were logged by the application. This is extremely useful and important functionality, I will write about it a bit later.",
      "Now let's write some code and extract the Time To First Byte event (to me it already starts sounds like a quest)",
      "Create the new file `performance-entries.ts` with next code:",
      "```typescript",
      "/*Gets Time To First Byte metric*/",
      "function getTTFB(entries: PerformanceEntry[]) {",
      "  const navigationEvent = entries.find((x) => x.entryType === \"navigation\") as PerformanceNavigationTiming;",
      "  return navigationEvent.responseStart ?? 0;",
      "}",
      "```",
      "Now, let's talk about the core web vitals and new PerformanceObserver API that can give us even more data to analyze.",
      "## Core Web Vitals and PerformanceObserver API",
      "Might be you already heard about the [Core Web Vitals](https://web.dev/vitals/#core-web-vitals) - user centric performance metrics that reflect the real-world experience of a critical part of the user experience. In 2021 (the list is a subject to change I believe) they are:",
      "- Largest Contentful Paint measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading.",
      "- First Input Delay: measures interactivity. To provide a good user experience, pages should have an FID of less than 100 milliseconds.",
      "- Cumulative Layout Shift: measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1.",
      "Right now, we didn't spot them yet and, unfortunately, the puppeteer has no API to get them simply. However we still are able to retrieve them either using [PerformanceObserver](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver) API or using [web-vitals](https://github.com/GoogleChrome/web-vitals) library that already comes with the new React applications. Today I will show both ways, but please be aware that measuring Core Web Vitals manually is more complex than at the example.",
      "To get Largest Contenful Paint or other metrics from the Core Web Vitals we will use new PerformanceObserver API. It is used ot observe (receive and process) performance events that comes from the browser. The simplest example will be look like this:",
      "```typescript",
      "function installLCPObserver() {",
      "  const lcpObserver = new PerformanceObserver((entryList) => {",
      "    entryList.getEntries();",
      "    const lastEntry = entries[entries.length - 1];",
      "    console.log(lastEntry);",
      "  });",
      "  lcpObserver.observe({ type: \"largest-contentful-paint\", buffered: true });",
      "}",
      "```",
      "However, to make it work in a real life we will have to make it more [complex](https://web.dev/lcp/#differences-between-the-metric-and-the-api)",
      "Firstly, inside the e2e folder (this is important!) create new folder named `typings` and put there index.d.ts file with next content:",
      "```typescript",
      "declare interface Window {",
      "  _pe: PerformanceEntry[];",
      "}",
      "```",
      "This code will extend extend `window` with the new property and fix TypeScript errors. This technique described in my previous article - [TypeScript Tips and Tricks - Declarations With Examples](https://drag13.io/posts/typescript-tips-tricks-declarations/index.html). But for ts-node [this is not enough](https://github.com/TypeStrong/ts-node/issues/782), ts-node will not pickup the custom typings unless you specify the `--files` options like I did in package.json.",
      "Then we need to install Performance Observer and store the performance results. Create new file named `lcp.ts` and put there:",
      "```typescript",
      "export function setupPerfromanceScripts() {",
      "  // we will store the data here",
      "  window._pe = [];",
      "  // install LCP obeserver",
      "  function installLCPObserver() {",
      "    const lcpObserver = new PerformanceObserver((entryList) => {",
      "      const entries = entryList.getEntries();",
      "      const lastEntry = entries[entries.length - 1];",
      "      // store the last found entry",
      "      window._pe.push(lastEntry);",
      "    });",
      "    // start observing",
      "    lcpObserver.observe({ type: \"largest-contentful-paint\", buffered: true });",
      "    return lcpObserver;",
      "  }",
      "  const lcpObserver = installLCPObserver();",
      "  // save data and disconnect in case page become hidden",
      "  document.addEventListener(\"visibilitychange\", () => {",
      "    if (document.visibilityState === \"hidden\") {",
      "      lcpObserver.takeRecords();",
      "      lcpObserver.disconnect();",
      "    }",
      "  });",
      "}",
      "```",
      "The last point is to extract stored data:",
      "```typescript",
      "import { Page } from \"puppeteer\";",
      "// extracts all web vitals",
      "export function extractWebVitals() {",
      "  function extractLCP(entries: PerformanceEntry[]) {",
      "    const allLcp = entries.filter((x) => x.entryType === \"largest-contentful-paint\");",
      "    return allLcp.length > 0 ? allLcp[allLcp.length - 1].startTime : 0;",
      "  }",
      "  // ignores DOM elements when serializing to avoid recursion",
      "  const safeParser = (key: string, val: any) => (key === \"element\" ? null : val);",
      "  const lcp = extractLCP(window._pe);",
      "  return { lcp: JSON.stringify(lcp, safeParser) };",
      "}",
      "export async function extractWebVitals(page: Page) {",
      "  return await page.evaluate(extractMetrics);",
      "}",
      "```",
      "This code is quite simple but have a few tricks:",
      "- I didn't use `find` as previous, because several `largest-contentful-paint` events are expected, we need the last one",
      "- I have to wrote `safeParser` method because to avoid serializing ciruclar dependencies",
      "- I put all code into the one function to avoid evaluation exception from puppeteer",
      "The same way you can implement getting other Core Web Vitals - [First Input Delay](https://web.dev/fid/#measure-fid-in-javascript) and [Cumulative Layout Shift](https://web.dev/cls/#measure-cls-in-javascript).",
      "However, these examples have some gaps. Google team warns that measuring Core Web Vitals is more complex and you might spot some pitfalls, thus you might decide to use [web-vitals](https://github.com/GoogleChrome/web-vitals) library for better precision.",
      "## How to use use web-vitals library to get Core Web Vitals metrics",
      "If you are using the latest version of the create-react-app, the web-vitals library already injected into your index.tsx file and almost ready to work. If you don't have it, please look into the [demo repository](https://github.com/Drag13/react-performance-puppeteer-profile/blob/master/src/index.js) for the example.",
      "The next step is to provide a function that will store reported data from the web-vitals to some storage where we can get it later:",
      "```javascript",
      "function storeWebVitals(entry) {",
      "  if (!window._cwv) {",
      "    window._cwv = [];",
      "  }",
      "  window._cwv.push(entry);",
      "}",
      "reportWebVitals(storeWebVitals);",
      "```",
      "And finally we need to read stored data it from our script:",
      "```typescript",
      "export async function extractCoreWebVitals(page: Page) {",
      "  const rawMetrics = await page.evaluate(function () {",
      "    return JSON.stringify(window._cwv);",
      "  });",
      "  const metrics: { name: string; value: number }[] = JSON.parse(rawMetrics);",
      "  const formattedMetrics = metrics.reduce(",
      "    (result, entry) => ((result[entry.name] = entry.value), result),",
      "    {} as Record<string, number>",
      "  );",
      "  return formattedMetrics;",
      "}",
      "```",
      "As a result you will something like this (depends on how much events was gathered from the page):",
      "```json",
      "{",
      "  \"TTFB\": 48.19999999552965,",
      "  \"FCP\": 96.29999999701977",
      "}",
      "```",
      "Now, it's time to talk about the most important metrics - your own custom metrics.",
      "## How to get custom performance events from React application using Profiler",
      "I showed how to get performance events that already exist on the browser. But for the rich application, this will be not enough, especially for the single-page application. Imagine you want to measure how much time it was taken to show your main part of the content (or menu, or sidebar) or how much time the browser spent rendering your new WYSIWYG editor or any other fancy component with animation. Luckily, exactly for such cases, custom performance events are very handy. Let me show this in the example.",
      "I will use React profiler API to get information when the component was finally rendered and the simplest example (it requires some tuning but should be OK enough for example) will be like this",
      "```js",
      "function putRenderedMark(id, phase, actualDuration, baseDuration, startTime, commitTime) {",
      "  // make it one time",
      "  if (!putRenderedMark._done) {",
      "    putRenderedMark._done = true;",
      "    performance.mark(\"app-rendered\");",
      "  }",
      "}",
      "const App = () => (",
      "  <Profiler id=\"app-rendered\" onRender={putRenderedMark}>",
      "    Hello from react",
      "  </Profiler>",
      ");",
      "```",
      "Retrieving is also simple:",
      "```typescript",
      "import { Page } from \"puppeteer\";",
      "function getAppRendered(entries: PerformanceEntry[]) {",
      "  const appRenderedEvent = entries.find((x) => x.name === \"app-rendered\");",
      "  return appRenderedEvent?.startTime ?? 0;",
      "}",
      "export async function getCustomMetrics(page: Page) {",
      "  const rawEntries = await page.evaluate(function () {",
      "    return JSON.stringify(window.performance.getEntries());",
      "  });",
      "  const entries = JSON.parse(rawEntries);",
      "  return {",
      "    appRendered: getAppRendered(entries),",
      "  };",
      "}",
      "```",
      "And this is it! Now rebuild the application using `--profile` flag",
      "```cmd",
      "npm run build -- --profile",
      "```",
      "Update `index.ts` to get custom metrics:",
      "```typescript",
      "//dump custom metrics",
      "const customMetris = await getCustomMetrics(page);",
      "```",
      "And run `e2e` script to observe the result!",
      "That's it, this way you are able to mark and measure any timings you need to track everything that happens with your application without any external libraries and with extreme precision!",
      "Very simple and very handy! But don't forget about the `--profile` flag it's required to enable Profiler on the Prod build for the React application.",
      "Now let's wrap up with the first part of the article.",
      "## Summary",
      "In the first part of the article, I've shown how easy is to use Puppeteer to get different performance entries for your React application. We managed to get ScriptDuration, LayoutDuration, Contentful Paint, Time To First Byte, and Largest Contentful Paint event. We also found how to create a custom performance event and extract it while profiling.",
      "The second part of the article will be dedicated to the Puppeteer setup - emulating slow network, slow CPU, emulating mobile devices to gather more information about your application.",
      "Demo repository with all code can be found here - [https://github.com/Drag13/react-performance-puppeteer-profile](https://github.com/Drag13/react-performance-puppeteer-profile)",
      "Special thanks to @addyosmani for the inspiration and puppeteer team for make it possible."
    ],
    "header": "# How to get performance metrics and web vitals using Puppeteer, React and TypeScript, Part 1",
    "preview": "![How to get performance metrics and web vitals using Puppeteer, React and TypeScript, part 1](~/img/kdpv/react-performance-puppeteer-profile-kdpv.jpg)"
  },
  {
    "name": "rescript-react-vite-guide",
    "text": [
      "# The Complete Guide to Setting up React with ReScript and Vite",
      "If you're intrigued by the idea of exploring another strongly typed, functional language, you should definitely give ReScript a try. This guide is designed to assist you in setting up a fundamental React application using ReScript and Vite, offering you a fantastic opportunity to delve into this exciting combination of technologies. With ReScript's type safety and the speed of Vite, you'll be well on your way to building robust and highly performant web applications that are a joy to work with. So, let's embark on this journey of enhancing your web development skills by seamlessly integrating React, ReScript, and Vite into your workflow.",
      "## Prerequisites",
      "Before diving into the setup process, make sure you have Node.js and npm installed on your system. You'll also need a code editor, and for the purposes of this guide, we'll assume you're using Visual Studio Code.",
      "## Step 1: Initialize a Vite Project",
      "To get started, open your terminal and run the following command:",
      "```bash",
      "npm init vite retest",
      "```",
      "This command initializes a Vite project named \"retest\", which provides a basic structure for your project.",
      "If you are using git, - update `.gitignore` with next two lines: ",
      "```",
      "*.bs.js",
      "lib",
      "```",
      "## Step 2: Clean Up the Project",
      "Upon project initialization, you may find some unnecessary files and folders created. To clean up your project, follow these steps:",
      "* Navigate to the \"retest\" folder: `cd retest`",
      "* Create a new \"src\" folder: `mkdir src`",
      "* Delete the following files and folders:",
      "* * counter.js",
      "* * main.js",
      "* * public",
      "* * javascript.svg",
      "* Move the style.css file to the \"src\" folder.",
      "Your project structure should now be much cleaner and easier to use.",
      "## Step 3: Install Dependencies",
      "Next, install the required dependencies for React, ReScript. Run the following commands:",
      "```bash",
      "npm install @rescript/react rescript -D",
      "npm install react react-dom",
      "```",
      "Additionally, it's a good idea to install the [ReScript VSCode extension](https://marketplace.visualstudio.com/items?itemName=chenglou92.rescript-vscode) to enhance your development experience.",
      "## Step 4: Update package.json",
      "Open your `package.json` file and update the scripts section to include the following commands:",
      "```json",
      "\"scripts\": {",
      "  \"build:res\": \"rescript\",",
      "  \"dev:res\": \"rescript build -w\",",
      "  \"dev\": \"vite\"",
      "}",
      "```",
      "These scripts will help you build and run your ReScript and Vite development server.",
      "## Step 5: Configure ReScript",
      "To configure ReScript, create a bsconfig.json file in the project root and populate it with the following content:",
      "```json",
      "{",
      "  \"name\": \"drag13proj\",",
      "  \"sources\": [",
      "    {",
      "      \"dir\": \"src\",",
      "      \"subdirs\": true",
      "    }",
      "  ],",
      "  \"package-specs\": [",
      "    {",
      "      \"module\": \"es6\",",
      "      \"in-source\": true",
      "    }",
      "  ],",
      "  \"suffix\": \".bs.js\",",
      "  \"jsx\": { \"version\": 4, \"mode\": \"automatic\" },",
      "  \"bs-dependencies\": [\"@rescript/react\"]",
      "}",
      "```",
      "Make sure to replace `drag13proj` with your desired project name.",
      "## Step 6: Create an index.res File",
      "In the `src` folder, create a new file named index.res and add the following ReScript code:",
      "```reason",
      "switch (ReactDOM.querySelector(\"#app\")) {",
      "| Some(rootElement) => {",
      "    let root = ReactDOM.Client.createRoot(rootElement)",
      "    ReactDOM.Client.Root.render(root, <h1> {React.string(\"Hello world\")} </h1>)",
      "  }",
      "| None => Js.Console.log(\"No root element found\")",
      "}",
      "```",
      "This code sets up your React app to render within the \"app\" element in your HTML file. If the element with id `app` will not be found, you will see an error in console. This is the first time we see a ReScript here. I am using the pattern matching to conditionally render the app if `#app` exists and what is very cool - ReScript helps me to handle unhappy cases. ",
      "## Step 7: Connect ReScript to index.html",
      "In the `index.html` file located in the project root, change the `<script>` tag's src attribute from `/main.js` to `./src/index.bs.js.`",
      "This change ensures that your ReScript code will be included in your project correctly.",
      "## Step 8: Start ReScript and Vite",
      "To start your development environment, open two separate terminal windows and run the following commands:",
      "```bash",
      "npm run dev:res",
      "npm run dev",
      "```",
      "This starts the ReScript compiler in watch mode and the Vite development server in parallel. Your project should now be live at http://127.0.0.1:5173/.",
      "Open it and check the result.",
      "## Step 9: Add Global Styles",
      "You can import global styles into your ReScript code by adding the following line at the beginning of your index.res file:",
      "```reason",
      "%%raw(\"import './style.css'\")",
      "```",
      "This allows you to include your global CSS styles in your project - such as `reset.css` or other styles you want to be applied globally.",
      "## Step 10: Add a New React Component",
      "To add a new React component, create a new file in the \"src\" folder named App.res. In this file, include the following code:",
      "```reason",
      "@react.component",
      "let make = (~title) => <h1> {React.string(title)} </h1>",
      "```",
      "This code defines a basic React component named \"App\" with a prop for the title. Very important to follow the convention - name of the variable should be `make`. ",
      "## Step 11: Update index.res with the New Component",
      "In your `index.res` file, update the rendering code to include the new \"App\" component:",
      "```reason",
      "ReactDOM.Client.Root.render(root, <App title=\"Hello world!\" />);",
      "```",
      "In the similar way you can add other components to build your app. Just remember to name the variable `make` and use single file per component.",
      "## Step 12: Use CSS Modules for Component Styling",
      "To apply styles to your `App` component using CSS modules, follow these steps:",
      "* Create a new file in the \"src\" folder named `app.module.css`.",
      "* Add the following CSS code to app.module.css:",
      "```css",
      ".header {",
      "  color: #4AF626;",
      "}",
      "```",
      "In your `App.res` component, import the styles using the following code:",
      "```reason",
      "@module external styles: {..} = \"./app.module.css\";",
      "```",
      "Apply the \"header\" class to the <h1> element in your \"App\" component using square brackets:",
      "reason",
      "```jsx",
      "<h1 className={styles[\"header\"]}> {React.string(title)} </h1>",
      "```",
      "With these steps, you can style your React components using CSS modules.",
      "## Conclusion",
      "Congratulations! You've successfully set up a development environment with React, ReScript, and Vite. This powerful combination allows you to create efficient and maintainable web applications with ease. With the basics in place, you can now start building your application and exploring the full capabilities of these technologies. Enjoy your web development journey!",
      "You can find the code example in the [GitHub demo repository](https://github.com/Drag13/rescript-react-vite-example)",
      "[Ukrainian version](../rescript-react-vite-guide-ua/index.pug)"
    ],
    "header": "# The Complete Guide to Setting up React with ReScript and Vite",
    "preview": "If you're intrigued by the idea of exploring another strongly typed, functional language, you should definitely give ReScript a try. This guide is designed to assist you in setting up a fundamental React application using ReScript and Vite, offering you a fantastic opportunity to delve into this exciting combination of technologies. With ReScript's type safety and the speed of Vite, you'll be well on your way to building robust and highly performant web applications that are a joy to work with. So, let's embark on this journey of enhancing your web development skills by seamlessly integrating React, ReScript, and Vite into your workflow."
  },
  {
    "name": "rescript-react-vite-guide-ua",
    "text": [
      "# ÐÐ¾ÑÐ¾ÑÐºÐ° ÑÐ½ÑÑÑÑÐºÑÑÑ ÑÐº ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ React Ð·Ð°ÑÑÐ¾ÑÑÐ½Ð¾Ðº Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ ReScript ÑÐ° Vite",
      "**ÐÐ¾Ð¿ÐµÑÐµÐ´Ð¶ÐµÐ½Ð½Ñ**: ÑÑ ÑÑÐ°ÑÑÑ Ð½Ðµ Ð¿ÑÐ¾ Ð¿ÐµÑÐµÐ²Ð°Ð³Ð¸ ÑÐ° Ð½ÐµÐ´Ð¾Ð»ÑÐºÐ¸ ReScript, ÑÐµ Ð¿ÑÐ¾ÑÑÐ¾ ÑÐ½ÑÑÑÑÐºÑÑÑ ÑÐº Ð¿ÑÐ´Ð½ÑÑÐ¸ React Ð¿ÑÐ¾ÐµÐºÑ Ð· ReScript Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ Vite. Ð¯ÐºÑÐ¾ Ð²Ð¸ Ð½Ðµ ÑÐ¾ÑÐµÑÐµ ÑÐ¸ÑÐ°ÑÐ¸ - Ð¿ÑÐ¾ÑÑÐ¾ ÑÐºÐ»Ð¾Ð½ÑÐ¹ÑÐµ [ÑÐµÐ¹ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹](https://github.com/Drag13/rescript-react-vite-example), Ð²ÑÑÐ°Ð½Ð¾Ð²ÑÑÑ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ ÑÐ° ÐµÐºÑÐ¿ÐµÑÐµÐ¼ÐµÐ½ÑÑÐ¹ÑÐµ.",
      "## ÐÐµÑÐµÐ´ÑÐ¼Ð¾Ð²Ð¸",
      "ÐÐµÑÑ Ð½ÑÐ¶ Ð¿ÑÐ¸ÑÑÑÐ¿Ð¸ÑÐ¸ Ð´Ð¾ Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ, Ð¿ÐµÑÐµÐºÐ¾Ð½Ð°Ð¹ÑÐµÑÑ, ÑÐ¾ Ð½Ð° Ð²Ð°ÑÑÐ¹ ÑÐ¸ÑÑÐµÐ¼Ñ Ð²ÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ñ Node.js ÑÐ° npm. ÐÐ°Ð¼ ÑÐ°ÐºÐ¾Ð¶ Ð·Ð½Ð°Ð´Ð¾Ð±Ð¸ÑÑÑÑ ÑÐµÐ´Ð°ÐºÑÐ¾Ñ ÐºÐ¾Ð´Ñ, Ñ Ð´Ð»Ñ ÑÑÐ¾Ð³Ð¾ Ð¿ÑÐ¸ÐºÐ»Ð°Ð´Ñ Ñ Ð±ÑÐ´Ñ Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÐ²Ð°ÑÐ¸ Visual Studio Code.",
      "## ÐÑÐ¾Ðº 1: ÐÐ½ÑÑÑÐ°Ð»ÑÐ·Ð°ÑÑÑ Ð¿ÑÐ¾ÐµÐºÑÑ Vite",
      "ÐÐ»Ñ Ð¿Ð¾ÑÐ°ÑÐºÑ Ð²ÑÐ´ÐºÑÐ¸Ð¹ÑÐµ Ð²Ð°Ñ ÑÐµÑÐ¼ÑÐ½Ð°Ð» ÑÐ° Ð²Ð¸ÐºÐ¾Ð½Ð°Ð¹ÑÐµ Ð½Ð°ÑÑÑÐ¿Ð½Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ:",
      "```bash",
      "npm init vite retest",
      "```",
      "Ð¦Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð° ÑÐ½ÑÑÑÐ°Ð»ÑÐ·ÑÑ Ð¿ÑÐ¾ÐµÐºÑ Vite Ð· Ð½Ð°Ð·Ð²Ð¾Ñ \"retest\", ÑÐºÐ¸Ð¹ Ð½Ð°Ð´Ð°Ñ Ð¾ÑÐ½Ð¾Ð²Ð½Ñ ÑÑÑÑÐºÑÑÑÑ Ð´Ð»Ñ Ð²Ð°ÑÐ¾Ð³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ.",
      "Ð¯ÐºÑÐ¾ Ð²Ð¸ Ð¼Ð°ÑÑÐµ git, Ð¾Ð½Ð¾Ð²ÑÑÑ .gitignore Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¼Ð¸ Ð´Ð²Ð¾Ð¼Ð° ÑÑÐ´ÐºÐ°Ð¼Ð¸: ",
      "```",
      "*.bs.js",
      "lib",
      "```",
      "## ÐÑÐ¾Ðº 2: ÐÑÐ´Ð³Ð¾ÑÐ¾Ð²ÐºÐ°",
      "ÐÑÑÐ»Ñ ÑÐ½ÑÑÑÐ°Ð»ÑÐ·Ð°ÑÑÑ Ð¿ÑÐ¾ÐµÐºÑÑ Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð·Ð½Ð°Ð¹ÑÐ¸ Ð´ÐµÑÐºÑ Ð½ÐµÐ¿Ð¾ÑÑÑÐ±Ð½Ñ ÑÐ°Ð¹Ð»Ð¸ ÑÐ° Ð¿Ð°Ð¿ÐºÐ¸. Ð©Ð¾Ð± Ð¾ÑÐ¸ÑÑÐ¸ÑÐ¸ ÑÐ²ÑÐ¹ Ð¿ÑÐ¾ÐµÐºÑ, Ð²Ð¸ÐºÐ¾Ð½Ð°Ð¹ÑÐµ ÑÐ°ÐºÑ Ð´ÑÑ:",
      "* ÐÐµÑÐµÐ¹Ð´ÑÑÑ Ð² Ð¿Ð°Ð¿ÐºÑ \"retest\": `cd retest``",
      "* Ð¡ÑÐ²Ð¾ÑÑÑÑ Ð½Ð¾Ð²Ñ Ð¿Ð°Ð¿ÐºÑ \"src\": `mkdir src``",
      "* ÐÐ¸Ð´Ð°Ð»ÑÑÑ Ð½Ð°ÑÑÑÐ¿Ð½Ñ ÑÐ°Ð¹Ð»Ð¸ ÑÐ° Ð¿Ð°Ð¿ÐºÐ¸:",
      "* * counter.js",
      "* * main.js",
      "* * public",
      "* * javascript.svg",
      "Ð¢Ð°ÐºÐ¾Ð¶ Ð¿ÐµÑÐµÐ¼ÑÑÑÑÑÑ ÑÐ°Ð¹Ð» style.css Ð´Ð¾ Ð¿Ð°Ð¿ÐºÐ¸ `src` Ñ ÑÐµÐ¿ÐµÑ Ð²Ð°ÑÐ° ÑÑÑÑÐºÑÑÑÐ° Ð¿ÑÐ¾ÐµÐºÑÑ Ð±ÑÐ´Ðµ Ð½Ð°Ð±Ð°Ð³Ð°ÑÐ¾ Ð·ÑÑÑÐ½ÑÑÐ¾Ñ Ð² ÑÐ¾Ð±Ð¾ÑÑ.",
      "## ÐÑÐ¾Ðº 3: ÐÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ñ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÐµÐ¹",
      "ÐÐ°Ð»Ñ Ð²ÑÑÐ°Ð½Ð¾Ð²ÑÑÑ Ð½ÐµÐ¾Ð±ÑÑÐ´Ð½Ñ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ Ð´Ð»Ñ React, ReScript. ÐÐ¸ÐºÐ¾Ð½Ð°Ð¹ÑÐµ ÑÐ°ÐºÑ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¸:",
      "```bash",
      "npm install @rescript/react rescript -D",
      "npm install react react-dom",
      "```",
      "Ð¢Ð°ÐºÐ¾Ð¶ ÑÐ°Ð´Ð¶Ñ Ð²ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐ¸ Ð¾ÑÑÑÑÐ¹Ð½Ðµ ÑÐ¾Ð·ÑÐ¸ÑÐµÐ½Ð½Ñ [ReScript Ð´Ð»Ñ VSCode](https://marketplace.visualstudio.com/items?itemName=chenglou92.rescript-vscode) Ð´Ð»Ñ Ð¿Ð¾Ð»ÐµÐ³ÑÐµÐ½Ð½Ñ ÑÐ¾Ð·ÑÐ¾Ð±ÐºÐ¸",
      "## ÐÑÐ¾Ðº 4: ÐÐ½Ð¾Ð²Ð»ÐµÐ½Ð½Ñ package.json",
      "ÐÑÐ´ÐºÑÐ¸Ð¹ÑÐµ ÑÐ°Ð¹Ð» `package.json` ÑÐ° Ð´Ð¾Ð´Ð°Ð¹Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¸ Ð² ÑÐ¾Ð·Ð´ÑÐ» \"scripts\":",
      "```json",
      "\"scripts\": {",
      "  \"build:res\": \"rescript\",",
      "  \"dev:res\": \"rescript build -w\",",
      "  \"dev\": \"vite\"",
      "}",
      "```",
      "Ð¦Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¸ Ð·Ð½Ð°Ð´Ð¾Ð±Ð»ÑÑÑÑÑ Ð²Ð°Ð¼ Ð´Ð»Ñ ÑÐ¾Ð³Ð¾ ÑÐ¾Ð± Ð·Ð°Ð¿ÑÑÑÐ¸ÑÐ¸ Ð²Ð°Ñ Ð·Ð°ÑÑÐ¾ÑÑÐ½Ð¾Ðº.",
      "## ÐÑÐ¾Ðº 5: ÐÐ°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ ReScript",
      "ÐÐ»Ñ Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ ReScript ÑÑÐ²Ð¾ÑÑÑÑ ÑÐ°Ð¹Ð» bsconfig.json Ð² ÐºÐ¾ÑÐµÐ½Ñ Ð¿ÑÐ¾ÐµÐºÑÑ ÑÐ° Ð·Ð°Ð¿Ð¾Ð²Ð½ÑÑÑ Ð¹Ð¾Ð³Ð¾ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¼ Ð²Ð¼ÑÑÑÐ¾Ð¼:",
      "```json",
      "{",
      "  \"name\": \"drag13proj\",",
      "  \"sources\": [",
      "    {",
      "      \"dir\": \"src\",",
      "      \"subdirs\": true",
      "    }",
      "  ],",
      "  \"package-specs\": [",
      "    {",
      "      \"module\": \"es6\",",
      "      \"in-source\": true",
      "    }",
      "  ],",
      "  \"suffix\": \".bs.js\",",
      "  \"jsx\": { \"version\": 4, \"mode\": \"automatic\" },",
      "  \"bs-dependencies\": [\"@rescript/react\"]",
      "}",
      "```",
      "ÐÐµ Ð·Ð°Ð±ÑÐ´ÑÑÐµ Ð·Ð°Ð¼ÑÐ½Ð¸ÑÐ¸ `drag13proj` Ð½Ð° Ð±Ð°Ð¶Ð°Ð½Ðµ ÑÐ¼'Ñ Ð¿ÑÐ¾ÐµÐºÑÑ. ÐÐ±Ð¾ Ð½Ðµ Ð¼ÑÐ½ÑÐ¹ÑÐµ, ÑÐºÑÐ¾ Ð²Ð¾Ð½Ð¾ Ð²Ð°Ð¼ Ð¿Ð°ÑÑÑ ð",
      "## ÐÑÐ¾Ðº 6: Ð¡ÑÐ²Ð¾ÑÐµÐ½Ð½Ñ ÑÐ°Ð¹Ð»Ñ index.res",
      "Ð£ Ð¿Ð°Ð¿ÑÑ `src` ÑÑÐ²Ð¾ÑÑÑÑ Ð½Ð¾Ð²Ð¸Ð¹ ÑÐ°Ð¹Ð» Ð· ÑÐ¼'ÑÐ¼ index.res (res ÑÐµ ÑÐ¾Ð·ÑÐ¸ÑÐµÐ½Ð½Ñ ÑÐ°Ð¹Ð»ÑÐ² ReScript) ÑÐ° Ð´Ð¾Ð´Ð°Ð¹ÑÐµ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¹ ÐºÐ¾Ð´ ReScript:",
      "```reason",
      "switch (ReactDOM.querySelector(\"#app\")) {",
      "| Some(rootElement) => {",
      "    let root = ReactDOM.Client.createRoot(rootElement)",
      "    ReactDOM.Client.Root.render(root, <h1> {React.string(\"Hello world\")} </h1>)",
      "  }",
      "| None => Js.Console.log(\"No root element found\")",
      "}",
      "```",
      "Ð¦ÐµÐ¹ ÐºÐ¾Ð´ Ð·Ð°Ð¿ÑÑÐºÐ°Ñ Ð½Ð°Ñ React Ð·Ð°ÑÑÐ¾ÑÑÐ½Ð¾Ðº. Ð¯ÐºÑÐ¾ ÐµÐ»ÐµÐ¼ÐµÐ½Ñ Ð· id `app` Ð½Ðµ Ð±ÑÐ´Ðµ Ð·Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾, Ð²Ð¸ Ð¿Ð¾Ð±Ð°ÑÐ¸ÑÐµ Ð¿Ð¾Ð¼Ð¸Ð»ÐºÑ Ð² ÐºÐ¾Ð½ÑÐ¾Ð»Ñ. Ð¦Ðµ Ð½Ð°ÑÐ° Ð¿ÐµÑÑÐ° Ð·ÑÑÑÑÑÑ Ð· ReScript Ñ ÐºÐ¾Ð´ Ð¼Ð¾Ð¶Ðµ Ð²Ð¸Ð´Ð°ÑÐ¸ÑÑ ÑÑÐ¾ÑÐ¸ Ð½Ðµ Ð·ÑÐ¾Ð·ÑÐ¼ÑÐ»Ð¸Ð¼, Ð°Ð»Ðµ Ð½Ð°ÑÐ¿ÑÐ°Ð²Ð´Ñ Ð²ÑÐµ Ð¿ÑÑÑÐ¾:",
      "Ð¯ Ð¿ÑÐ¾Ð±ÑÑ Ð·Ð½Ð°Ð¹ÑÐ¸ ÐµÐ»ÐµÐ¼ÐµÐ½Ñ Ð· id #app Ñ ÑÐºÑÐ¾ Ð²ÑÐ½ Ñ Ð²Ð¸ÐºÐ¾Ð½ÑÑÑÑÑÑ Ð³ÑÐ»ÐºÐ° ÑÐ½ÑÑÑÐ°Ð»ÑÐ·Ð°ÑÑÑ. Ð¯ÐºÑÐ¾ Ð½ÐµÐ¼Ð°Ñ - Ð¼Ð¸ Ð¿Ð¾Ð±Ð°ÑÐ¸Ð¼Ð¾ Ð¿Ð¾Ð¼Ð¸Ð»ÐºÑ Ñ ÐºÐ¾Ð½ÑÐ¾Ð»Ñ. Ð¦Ñ ÐºÐ¾Ð½ÑÑÑÑÐºÑÑÑ Ð½Ð°Ð·Ð¸Ð²Ð°ÑÑÑÑÑ [Pattern Matching](https://rescript-lang.org/docs/manual/latest/pattern-matching-destructuring) Ñ ÑÐµ ÑÐ¾ÑÑ Ð½Ð°ÐºÑÑÐ°Ð» switch-case Ð°Ð»Ðµ Ð½Ð° ÑÑÐµÑÐ¾ÑÐ´Ð°Ñ - Ð´ÑÐ¶Ðµ Ð¿Ð¾ÑÑÐ¶Ð½Ð° ÑÑÑ Ð½Ð°ÑÐ¿ÑÐ°Ð²Ð´Ñ.",
      "## ÐÑÐ¾Ðº 7: ÐÑÐ´ÐºÐ»ÑÑÐµÐ½Ð½Ñ ReScript Ð´Ð¾ index.html",
      "Ð£ ÑÐ°Ð¹Ð»Ñ `index.html`, ÑÐºÐ¸Ð¹ Ð·Ð½Ð°ÑÐ¾Ð´Ð¸ÑÑÑÑ Ð² ÐºÐ¾ÑÐµÐ½Ñ Ð¿ÑÐ¾ÐµÐºÑÑ, Ð·Ð¼ÑÐ½ÑÑÑ Ð°ÑÑÐ¸Ð±ÑÑ src ÑÐµÐ³Ñ `<script>` Ð· `/main.js` Ð½Ð° `./src/index.bs.js`.",
      "Ð¦Ñ Ð·Ð¼ÑÐ½Ð° Ð·Ð°Ð±ÐµÐ·Ð¿ÐµÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ðµ Ð²ÐºÐ»ÑÑÐµÐ½Ð½Ñ Ð²Ð°ÑÐ¾Ð³Ð¾ ÐºÐ¾Ð´Ñ ReScript Ñ Ð²Ð°Ñ Ð¿ÑÐ¾ÐµÐºÑ.",
      "## ÐÑÐ¾Ðº 8: ÐÐ°Ð¿ÑÑÐº ReScript ÑÐ° Vite",
      "ÐÐ»Ñ Ð·Ð°Ð¿ÑÑÐºÑ ÑÐµÑÐµÐ´Ð¾Ð²Ð¸ÑÐ° ÑÐ¾Ð·ÑÐ¾Ð±ÐºÐ¸ Ð²ÑÐ´ÐºÑÐ¸Ð¹ÑÐµ Ð´Ð²Ð° Ð¾ÐºÑÐµÐ¼Ñ ÑÐµÑÐ¼ÑÐ½Ð°Ð»Ð¸ (Ð¼Ð¾Ð¶Ð½Ð° Ð±ÑÐ»Ð¾ Ð± Ð¿Ð¾ÑÑÐ°Ð²Ð¸ÑÐ¸ `concurrently`, Ð°Ð»Ðµ Ð´Ð»Ñ ÑÐµÑÑÐ²Ð¾Ð³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ, Ð¿ÐµÐ²Ð½Ð¾, Ð½Ðµ Ð²Ð°ÑÑÐ¾) ÑÐ° Ð²Ð¸ÐºÐ¾Ð½Ð°Ð¹ÑÐµ Ð½Ð°ÑÑÑÐ¿Ð½Ñ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð¸:",
      "```bash",
      "npm run dev:res",
      "npm run dev",
      "```",
      "Ð¦Ðµ Ð·Ð°Ð¿ÑÑÐºÐ°Ñ ÐºÐ¾Ð¼Ð¿ÑÐ»ÑÑÐ¾Ñ ReScript Ð² ÑÐµÐ¶Ð¸Ð¼Ñ ÑÐ¿Ð¾ÑÑÐµÑÐµÐ¶ÐµÐ½Ð½Ñ Ñ ÑÐµÑÐ²ÐµÑ ÑÐ¾Ð·ÑÐ¾Ð±ÐºÐ¸ Vite Ð¿Ð°ÑÐ°Ð»ÐµÐ»ÑÐ½Ð¾. Ð¢ÐµÐ¿ÐµÑ Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÑÐ´ÐºÑÐ¸ÑÐ¸ Ð²Ð°Ñ Ð¿ÑÐ¾ÐµÐºÑ Ð·Ð° Ð°Ð´ÑÐµÑÐ¾Ñ `http://127.0.0.1:5173/.`",
      "## ÐÑÐ¾Ðº 9: ÐÐ¾Ð´Ð°Ð²Ð°Ð½Ð½Ñ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½Ð¸Ñ ÑÑÐ¸Ð»ÑÐ²",
      "ÐÐ¸ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÐ¼Ð¿Ð¾ÑÑÑÐ²Ð°ÑÐ¸ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½Ñ ÑÑÐ¸Ð»Ñ Ð² ÑÐ²ÑÐ¹ ÐºÐ¾Ð´ ReScript, Ð´Ð¾Ð´Ð°Ð²ÑÐ¸ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¹ ÑÑÐ´Ð¾Ðº Ð² Ð¿Ð¾ÑÐ°ÑÐ¾Ðº Ð²Ð°ÑÐ¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ñ index.res:",
      "```reason",
      "%%raw(\"import './style.css'\")",
      "```",
      "Ð¦Ðµ Ð´Ð¾Ð·Ð²Ð¾Ð»Ð¸ÑÑ Ð²Ð°Ð¼ Ð²ÐºÐ»ÑÑÐ¸ÑÐ¸ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½Ñ ÑÑÐ¸Ð»Ñ CSS Ñ Ð²Ð°Ñ Ð¿ÑÐ¾ÐµÐºÑ, ÑÐ°ÐºÑ ÑÐº `reset.css` Ð°Ð±Ð¾ ÑÐ½ÑÑ Ð³Ð»Ð¾Ð±Ð°Ð»ÑÐ½Ñ ÑÑÐ¸Ð»Ñ (Ð½Ð°Ð¿ÑÐ¸ÐºÐ»Ð°Ð´ bootstrap ð¿).",
      "## ÐÑÐ¾Ðº 10: ÐÐ¾Ð´Ð°Ð²Ð°Ð½Ð½Ñ Ð½Ð¾Ð²Ð¾Ð³Ð¾ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° React",
      "Ð©Ð¾Ð± Ð´Ð¾Ð´Ð°ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ React, ÑÑÐ²Ð¾ÑÑÑÑ Ð½Ð¾Ð²Ð¸Ð¹ ÑÐ°Ð¹Ð» Ð² Ð¿Ð°Ð¿ÑÑ `src` Ð· ÑÐ¼ÐµÐ½ÐµÐ¼ `App.res`. Ð ÑÑÐ¾Ð¼Ñ ÑÐ°Ð¹Ð»Ñ Ð´Ð¾Ð´Ð°Ð¹ÑÐµ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¹ ÐºÐ¾Ð´:",
      "```reason",
      "@react.component",
      "let make = (~title) => <h1> {React.string(title)} </h1>",
      "```",
      "Ð¦Ðµ ÑÑÐ²Ð¾ÑÐ¸ÑÑ Ð½Ð°Ð¼ Ð½Ð¾Ð²Ð¸Ð¹ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ, ÑÐºÐ¸Ð¹ Ð¿ÑÐ¸Ð¹Ð¼Ð°Ñ `title` Ð² ÑÐºÐ¾ÑÑÑ Ð¿ÑÐ¾Ð¿Ñ. ÐÐ¾ÑÐµÑÑ, Ð²Ð¸ Ð·Ð²ÐµÑÐ½ÑÐ»Ð¸ ÑÐ²Ð°Ð³Ñ Ð½Ð° Ð²ÑÐ´ÑÑÑÐ½ÑÑÑÑ ÑÐ¸Ð¿Ñ Ð² title? Ð¦Ðµ ÑÐµ Ð¾Ð´Ð½Ð° ÑÐ¸Ð»ÑÐ½Ð° ÑÑÐ¾ÑÐ¾Ð½Ð° ReScript - Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐ½Ðµ Ð²Ð¸Ð²ÐµÐ´ÐµÐ½Ð½Ñ ÑÐ¸Ð¿ÑÐ², Ð² Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ Ð²ÑÐ´ Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ°Ð½Ð½Ñ. Ð ÑÐ¾Ð±Ð¸ÑÑ Ð²ÑÐ½ ÑÐµ ÐºÑÐ°ÑÐµ Ð½ÑÐ¶ TypeScript",
      "Ð©Ðµ Ð¾Ð´Ð¸Ð½ Ð²Ð°Ð¶Ð»Ð¸Ð²Ð¸Ð¹ Ð¼Ð¾Ð¼ÐµÐ½Ñ ÑÐµ Ð´Ð¾ÑÑÐ¸Ð¼ÑÐ²Ð°ÑÐ¸ÑÑ ÐºÐ¾Ð½Ð²ÐµÐ½ÑÑÑ - ÑÐ¼'Ñ Ð·Ð¼ÑÐ½Ð½Ð¾Ñ Ð´Ð»Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð¾Ð±Ð¾Ð²'ÑÐ·ÐºÐ¾Ð²Ð¾ Ð¿Ð¾Ð²Ð¸Ð½Ð½Ð¾ Ð±ÑÑÐ¸ `make`.",
      "## ÐÐ½Ð¾Ð²Ð»ÐµÐ½Ð½Ñ index.res Ð· Ð½Ð¾Ð²Ð¸Ð¼ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð¼",
      "Ð£ ÑÐ°Ð¹Ð»Ñ index.res Ð¾Ð½Ð¾Ð²ÑÑÑ ÐºÐ¾Ð´, ÑÐ¾Ð± Ð²ÐºÐ»ÑÑÐ¸ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ \"App\":",
      "```reason",
      "ReactDOM.Client.Root.render(root, <App title=\"Hello world!\" />);",
      "```",
      "Ð¢Ð°ÐºÐ¸Ð¼ Ð¶Ðµ ÑÐ¿Ð¾ÑÐ¾Ð±Ð¾Ð¼ Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð´Ð¾Ð´Ð°Ð²Ð°ÑÐ¸ ÑÐ½ÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¸ Ð´Ð»Ñ Ð¿Ð¾Ð±ÑÐ´Ð¾Ð²Ð¸ Ð²Ð°ÑÐ¾Ð³Ð¾ Ð·Ð°ÑÑÐ¾ÑÑÐ½ÐºÑ. ÐÑÐ¾ÑÑÐ¾ Ð½Ðµ Ð·Ð°Ð±ÑÐ´ÑÑÐµ Ð½Ð°Ð·Ð¸Ð²Ð°ÑÐ¸ Ð·Ð¼ÑÐ½Ð½Ñ `make` .",
      "## ÐÑÐ¾Ðº 12: ÐÐ¸ÐºÐ¾ÑÐ¸ÑÑÐ°Ð½Ð½Ñ Ð¼Ð¾Ð´ÑÐ»ÑÐ² CSS Ð´Ð»Ñ ÑÑÐ¸Ð»ÑÐ·Ð°ÑÑÑ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ°",
      "ÐÐ»Ñ Ð·Ð°ÑÑÐ¾ÑÑÐ²Ð°Ð½Ð½Ñ ÑÑÐ¸Ð»ÑÐ² Ð´Ð¾ Ð²Ð°ÑÐ¾Ð³Ð¾ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ° `App` Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ Ð¼Ð¾Ð´ÑÐ»ÑÐ² CSS, Ð´Ð¾ÑÑÐ¸Ð¼ÑÐ¹ÑÐµÑÑ ÑÐ¸Ñ ÐºÑÐ¾ÐºÑÐ²:",
      "* Ð¡ÑÐ²Ð¾ÑÑÑÑ Ð½Ð¾Ð²Ð¸Ð¹ ÑÐ°Ð¹Ð» Ð² Ð¿Ð°Ð¿ÑÑ `src` Ð· ÑÐ¼ÐµÐ½ÐµÐ¼ `app.module.css`.",
      "* ÐÐ¾Ð´Ð°Ð¹ÑÐµ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¹ ÐºÐ¾Ð´ CSS Ñ app.module.css:",
      "```css",
      ".header {",
      "  color: #4AF626;",
      "}",
      "```",
      "Ð£ Ð²Ð°ÑÐ¾Ð¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ `App.res` ÑÐ¼Ð¿Ð¾ÑÑÑÐ¹ÑÐµ ÑÑÐ¸Ð»Ñ Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ð¾Ð³Ð¾ ÐºÐ¾Ð´Ñ:",
      "```reason",
      "@module external styles: {..} = \"./app.module.css\";",
      "```",
      "ÐÐ°ÑÑÐ¾ÑÑÐ¹ÑÐµ ÐºÐ»Ð°Ñ \"header\" Ð´Ð¾ ÐµÐ»ÐµÐ¼ÐµÐ½ÑÑ `<h1>` Ñ Ð²Ð°ÑÐ¾Ð¼Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ \"App\" Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ ÐºÐ²Ð°Ð´ÑÐ°ÑÐ½Ð¸Ñ Ð´ÑÐ¶Ð¾Ðº:",
      "```jsx",
      "<h1 className={styles[\"header\"]}> {React.string(title)} </h1>",
      "```",
      "Ð¢ÐµÐ¿ÐµÑ Ð¡SS Ð¼Ð¾Ð´ÑÐ»Ñ Ð³Ð¾ÑÐ¾Ð²Ñ Ð¿ÑÐ°ÑÑÐ²Ð°ÑÐ¸.",
      "## ÐÑÐ´ÑÑÐ¼ÐºÐ¸",
      "ÐÑÑÐ°Ñ, ÑÐµÐ¿ÐµÑ Ñ Ð²Ð°Ñ Ñ ÑÑÐ°ÑÑÐ¾Ð²Ð¸Ð¹ Ð¿ÑÐ¾ÐµÐºÑ Ð½Ð° React ÑÐ° ReScript. ÐÐ²Ð¸ÑÐ°Ð¹Ð½Ð¾ ÑÑÑ ÑÐµ Ð½ÑÑÐ¾Ð³Ð¾ Ð½Ðµ Ð¼Ð°Ñ, Ð°Ð»Ðµ Ð¿ÐµÑÑÐ¸Ð¹ ÐºÑÐ¾Ðº ÑÐ¶Ðµ Ð·ÑÐ¾Ð±Ð»ÐµÐ½Ð¾ - Ð´Ð°Ð»Ñ ÑÐ¿ÑÐ°Ð²Ð° ÑÐ¶Ðµ Ð·Ð° Ð²Ð°Ð¼Ð¸. Ð ÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹ Ð´Ð¾ ÑÑÑÑ ÑÑÐ°ÑÑÑ Ð»ÐµÐ¶Ð¸ÑÑ [ÑÑÑÐ¾ÑÐºÐ¸](https://github.com/Drag13/rescript-react-vite-example)",
      "[ÐÐ½Ð³Ð»ÑÐ¹ÑÑÐºÐ° Ð²ÐµÑÑÑÑ](../rescript-react-vite-guide/index.pug)"
    ],
    "header": "# ÐÐ¾ÑÐ¾ÑÐºÐ° ÑÐ½ÑÑÑÑÐºÑÑÑ ÑÐº ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ Ð½Ð¾Ð²Ð¸Ð¹ React Ð·Ð°ÑÑÐ¾ÑÑÐ½Ð¾Ðº Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ ReScript ÑÐ° Vite",
    "preview": "**ÐÐ¾Ð¿ÐµÑÐµÐ´Ð¶ÐµÐ½Ð½Ñ**: ÑÑ ÑÑÐ°ÑÑÑ Ð½Ðµ Ð¿ÑÐ¾ Ð¿ÐµÑÐµÐ²Ð°Ð³Ð¸ ÑÐ° Ð½ÐµÐ´Ð¾Ð»ÑÐºÐ¸ ReScript, ÑÐµ Ð¿ÑÐ¾ÑÑÐ¾ ÑÐ½ÑÑÑÑÐºÑÑÑ ÑÐº Ð¿ÑÐ´Ð½ÑÑÐ¸ React Ð¿ÑÐ¾ÐµÐºÑ Ð· ReScript Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ Vite. Ð¯ÐºÑÐ¾ Ð²Ð¸ Ð½Ðµ ÑÐ¾ÑÐµÑÐµ ÑÐ¸ÑÐ°ÑÐ¸ - Ð¿ÑÐ¾ÑÑÐ¾ ÑÐºÐ»Ð¾Ð½ÑÐ¹ÑÐµ [ÑÐµÐ¹ ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹](https://github.com/Drag13/rescript-react-vite-example), Ð²ÑÑÐ°Ð½Ð¾Ð²ÑÑÑ Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ ÑÐ° ÐµÐºÑÐ¿ÐµÑÐµÐ¼ÐµÐ½ÑÑÐ¹ÑÐµ."
  },
  {
    "name": "security-headers",
    "text": [
      "# Top-5 HTTP Security Headers",
      "![Top-5 HTTP Security Headers KDPV](~/img/kdpv/security-headers.jpg)",
      "Nowadays, security is important as never before. I've prepared a very small article about the Top-5 security headers in 2020 that will help your site keep your users in safety. Have a nice reading!",
      "## Content-Security-Policy",
      "One of the most important security header. It was created to prevent the usage of any resource from an untrusted source.",
      "Let's go to the short example first:",
      "Evil Bob found [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) vulnerability on Alice's site. He decides to inject the script into the web-page to steal some customer data. He put this script tag into her page",
      "```html",
      "<script src=\"https://my-evilt-site.org/very-evil-script.js\"></script>",
      "```",
      "and waits for the results",
      "Luckily, Alice knows about CSP header and already added it to the response : ```Content-Security-Policy: default-src 'self'```. Now, a browser already knows, that scripts (and images, and fonts, and styles) not from origin domains are forbidden to use and Bob's attack fails.",
      "Within this header you can deny inline scripts and eval usage (goodbye inline XSS), specify a checksum for the scripts (goodbye substitution of the 3rd party scripts), allow specific domains for your images, fonts, and styles. It can restrict fetch requests, deny usage of your site inside an iframe (goodbye [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery)) and much more. CSP header is very flexible and can support almost all of your needs.",
      "### Can I use Content-Security-Policy?",
      "CSP header [supported](https://caniuse.com/#feat=mdn-http_headers_csp_content-security-policy) by almost all browsers including IE (but with a special name - X-Content-Security-Policy). Some of the directives may not be supported across different browsers but this will not ruin the header.",
      "### Code Example",
      "* Allow all remote resources from your domain: ```Content-Security-Policy: default-src 'self'```. No external API calls allowed!",
      "* Allow all remote resource from your domain and external api calls: ```Content-Security-Policy: default-src 'self'; connect-src 'self' https://my-example-api.ua```. IFraming is allowed.",
      "* Allow all remote resource from your domain, external api calls, disallow iframing your site: ```Content-Security-Policy: default-src 'self'; connect-src 'self' https://my-example-api.ua; frame-ancestors 'none';``` Not so strict as I wish.",
      "* Disallow everything except whitelisted: ```Content-Security-Policy: default-src 'none'; img-src 'self'; font-src 'self'; connect-src 'self' https://my-example-api.ua; script-src 'self'; style-src 'self'; frame-ancestors 'none'``` Much better now but without [critical css](https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path)",
      "* Disallow everything except whitelisted (with inline css): ```Content-Security-Policy: default-src 'none'; img-src 'self'; font-src 'self'; connect-src 'self' https://my-example-api.ua; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none'```",
      "Examples are simplified just to give you a better understanding of the CSP header power. For additional info check the [mdn page](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) and the [CSP Cheat Sheet](https://scotthelme.co.uk/csp-cheat-sheet/) is also very useful.",
      "**Important Notice**: If you need to deny the possibility to iframe your site in IE - you should use [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)",
      "## X-Content-Type-Options",
      "This is a bit tricky header but it works very well with CSP, so it worth mentioning.",
      "Imagine, that Evil Bob found XSS on Alice's site and tries to put some malicious script inside. But Alice already has setup CSP policy, so his attempt to download javascript from untrusted resources fails. But Evil Bob is smart. He changes the type of the injected script to \"text/plain\". Now, CSP protection will allow loading script, because it is not javascript anymore and should not be executed. But sometimes, browsers try to be too smart. They may check the content of the loading \"text\", and decide to execute it as JavaScript. This named sniffing and this behavior varies depending on the browser.",
      "This header tells the browser,  strictly follow provided Mime/Type, and don't try to guess.",
      "### Can I use X-Content-Type-Options?",
      "[Supported](https://caniuse.com/#feat=mdn-http_headers_x-content-type-options) by all browsers except Safari.",
      "### Code Example",
      "Only one option is possible: ```X-Content-Type-Options: nosniff```",
      "## Feature-Policy",
      "This header is designed to turn off features that you don't expect to be used.",
      "Alice has a nice and shiny site with a big audience. Evil Bob found XSS and decided to use Alice's site for spying using a user's web camera. So he injects malicious code and waits for the dozen of the new videos.",
      "But, fortunately, Alice already set Feature-Policy header to ```Feature-Policy: camera 'none'```",
      "Now, browsers know, that using a camera is not permitted for anyone, and Bob's attempt fails. Of course, you can turn off not only a camera but also autoplay (useful when you are showing some ads from 3rd party vendors), microphone and very much more. If you don't want to turn it off for all, you can allow to use it only for code from your domain.",
      "### Can I use Feature-Policy?",
      "Partially [supported](https://caniuse.com/#feat=feature-policy) by most of the browsers and not supported by the IE.",
      "### Code Example",
      "Disabling geolocation:  ```Feature-Policy: geolocation 'none'```",
      "Disabling sensetive features:  ```Feature-Policy: camera 'none'; microphone 'none'; geolocation 'none'; autoplay 'none'; display-capture 'none'; payment 'none'```",
      "## Strict-Transport-Security",
      "This is a very simple header for those who use HTTPS. It tells the browser to use only HTTPS connection, even if the user is trying to use HTTP.",
      "Let's imaging that Alice is sitting in a public place and use public WiFi. Evil Bob is sitting not very far from her and trying to sniff all non-encrypted traffic. Alice decides to visit some online-shop and uses an old and good link like www://my-example-shop.com. Evil Bob sees her request (it's not encrypted) and starts recording Alice's activity hoping to get credit card information. But, after the first request, the shop returns STS header: ```Strict-Transport-Security: max-age=31536000```. And browsers automatically redirects Alice to the HTTPS version of the page. From now, Evil Bob sees only encrypted traffic and can't steal anything.",
      "## Can I use Strict-Transport-Security?",
      "[Supported](https://caniuse.com/#feat=stricttransportsecurity) by all browsers except Opera Mini. And Yes, IE also supports this header.",
      "### Code Example",
      "```Strict-Transport-Security: max-age=31536000; includeSubDomains```",
      "## Referrer-Policy",
      "Controls how much of the referer information (host, query params, etc) are sent within the request.",
      "Short example:",
      "Alice has a forum about cats with lots of links to other resources. When a user clicks on the link, he is navigated to another web page, and this web page can gather some information about the source of the navigation. You value the privacy of your users and want to keep this information secret. You set Referer-Policy header and deny browser to send referer information for all except your self.",
      "### Can I use Referrer-Policy?",
      "Mostly [Supported](https://caniuse.com/#feat=referrer-policy) with all (IE - partially) browsers except Opera Mini",
      "### Code Example",
      "Showing referer info only for the origin: ```Referrer-Policy: same-origin```",
      "## Summary:",
      "As far as I use .NET, here is the result setup for web.config: (note, unsafe js inline is not supported):",
      "```xml",
      "<customHeaders>",
      "    <add name=\"Content-Security-Policy\" value=\"default-src 'none'; img-src 'self'; font-src 'self'; connect-src 'self' https://my-example-api.ua; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-ancestors 'none'\" />",
      "    <add name=\"Feature-Policy\" value=\"camera 'none'; microphone 'none'; geolocation 'none'; autoplay 'none'; display-capture 'none'; payment 'none'\" />",
      "    <add name=\"X-Content-Type-Options\" value=\"nosniff\"/>",
      "    <add name=\"Referrer-Policy\" value=\"same-origin\"/>",
      "    <add name=\"Strict-Transport-Security\" value=\"max-age=31536000\"/>",
      "</customHeaders>",
      "```",
      "## Useful links:",
      "* [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)",
      "* [CSP Cheat Sheet](https://scotthelme.co.uk/csp-cheat-sheet/)",
      "* [Feature-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy)",
      "* [Using Feature-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy/Using_Feature_Policy)",
      "* [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/headers/X-Content-Type-Options)",
      "* [Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)",
      "* [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)",
      "Bonus: web.config with all set headers can be found [here](https://github.com/Drag13/articles/blob/master/headers/web.config)",
      "**Stay safe and don't forget to remove x-powered header! :)**",
      "[Thanks to John Salvino for the photo]"
    ],
    "header": "# Top-5 HTTP Security Headers",
    "preview": "![Top-5 HTTP Security Headers KDPV](~/img/kdpv/security-headers.jpg)"
  },
  {
    "name": "start-new-project",
    "text": [
      "# How to start a new JavaScript project with automated formatting, linting, testing, and documentation",
      "Keeping your code consistent and well-formatted not an easy task even when you work alone. But when you work with a team or with open source projects all start getting even harder. Everyone has their own code style, someone doesn't run tests, and no one writes documentation. This article will help you to set up all these things and even more - automate this routine to never do it manually.",
      "After reading you will get your own npm-ready project with the next features:",
      "* Text formatting and code style",
      "* Automated tests with code coverage and threshold",
      "* Unified commit style",
      "* Documentation generated from the code and commits",
      "* Automated publish process",
      "Let's go!",
      "## Prerequisites",
      "Create a new folder, initialize new repository and project and go to the next step.",
      "```cmd",
      "git init",
      "npm init",
      "npm i -D typescript",
      "./node_modules/.bin/tsc --init",
      "```",
      "## Code Formatting",
      "Let's start with code formatting - indention types, size and so on. First tool is [.editorconfig](https://editorconfig.org/) file. It is recognized with most of IDE and helps to keep your autoformatting consistent across different IDEs and users.",
      "Create .editorconfig in the root of the project with next content (feel free to change it for your desired style)",
      "```yml",
      "#root = true",
      "[*]",
      "indent_style = space",
      "end_of_line = lf",
      "charset = utf-8",
      "trim_trailing_whitespace = true",
      "insert_final_newline = true",
      "max_line_length = 100",
      "indent_size = 4",
      "[*.md]",
      "trim_trailing_whitespace = false",
      "```",
      "But sometimes autoformatting can be not used. To ensure that all is well formatted [prettier](https://github.com/prettier/prettier) appears. If you forget to format the code, prettier will do it for you.",
      "```cmd",
      "npm i -D prettier",
      "```",
      "Add this command to the scripts section your package.json file",
      "```json",
      "\"prettier\": \"prettier --config .prettierrc.json --write src/**/*.ts\"",
      "```",
      "And add .prettierrc.json file with your settings to the root of the project",
      "```json",
      "{",
      "    \"tabWidth\": 4,",
      "    \"useTabs\": false,",
      "    \"semi\": true,",
      "    \"singleQuote\": true,",
      "    \"trailingComma\": \"es5\",",
      "    \"arrowParens\": \"always\"",
      "}",
      "```",
      "Now you can write some code and try run \"npm run prettier\". Prettier will check src folder and autoformat your code without any help!",
      "## Code Style",
      "Code style - like avoiding using == instead of === or shadowing variables also needs to be check. For this purpose, we will take [tslint](https://palantir.github.io/tslint/). If you prefer javascript - take [eslint](https://eslint.org/) instead.",
      "```cmd",
      "npm i -D tslint",
      "./node_modules/.bin/tslint --init",
      "```",
      "The last command will create tslint.json for you. It already extends tslint:recommended set of rules, but you can extend or override them whatever you want. Don't forget to add lint command to your package.json.",
      "package.json",
      "```json",
      "\"lint\": \"tslint -c tslint.json 'src/**/*.ts' 'tests/**/*.spec.ts'\"",
      "```",
      "As you see it setup to work with src and tests folder, so all your code should be placed there.",
      "## Testing",
      "Now it is time to set up our tests. Install karma and other related dependencies",
      "```cmd",
      "npm i -D karma karma-jasmine jasmine karma-typescript karma-chrome-launcher @types/jasmine",
      "./node_modules/.bin/karma init",
      "```",
      "And add new configuration block to newly created karma.conf.js",
      "```js",
      "karmaTypescriptConfig : {",
      "    include: [\"./src/**/*.ts\", \"./tests/**/*.spec.ts\"],",
      "    tsconfig: \"./tsconfig.json\",",
      "    reports: {",
      "        \"html\": \"coverage\",",
      "        \"lcovonly\": {",
      "            directory: './coverage',",
      "            filename: '../lcov.dat'",
      "        }",
      "    },",
      "    coverageOptions: {",
      "        threshold: {",
      "            global: {",
      "                statements: 60,",
      "                branches: 60,",
      "                functions: 60,",
      "                lines: 60",
      "            },",
      "            file: {",
      "                statements: 60,",
      "                branches: 60,",
      "                functions: 60,",
      "                lines: 60,",
      "            }",
      "        }",
      "    },",
      "}",
      "```",
      "This will setup code-coverage file and threshold level. Both are important. First one helps you to deal with your coverage and the second one keeps your coverage on a certain level.",
      "Update package.json",
      "```json",
      "\"test\": \"karma start\"",
      "```",
      "And try to run it. Don't forget to write some code inside src folder and tests inside the tests folder.",
      "Btw, if you plan to use continuous integration (like Travis, Jenkins or so on) it is better to change Chrome runner to HeadlessChrome with [puppeteer](https://github.com/GoogleChrome/puppeteer). For more information about HeadlessChrome and CI - check my demo [repository](https://github.com/Drag13/IsNumberStrict) on GitHub.",
      "## Commit Style",
      "Usually, all write commits in some \"random\" format. So, to keep commits good enough, [commitizen](https://github.com/commitizen/cz-cli) was invented. This tool prompt a few questions and generate commit for you. Another good point that we can generate changelog file from commits written with help of commitizen.",
      "Install commitizen and conventional-changelog adapter",
      "```cmd",
      "npm i -D commitizen",
      "npm i -D cz-conventional-changelog",
      "```",
      "Update scripts",
      "```json",
      "\"commit\":\"git-cz\"",
      "```",
      "Add new configuration section inside package.json for commitizen.",
      "```json",
      "\"config\": {",
      "        \"commitizen\": {",
      "            \"path\": \"./node_modules/cz-conventional-changelog\"",
      "        }",
      "    }",
      "```",
      "## Documentation",
      "If your project is bigger than a few functions it as a good idea to have some documentation. And it is even better when you don't need to write something manually. For that purposes [typedoc](https://www.npmjs.com/package/typedoc) exists. It takes your .ts files, your jsdoc comments and creates nice and shiny documentation. If you are using javascript - you can try [esdoc](https://esdoc.org/) instead.",
      "```cmd",
      "npm i -D typedoc",
      "```",
      "package.json",
      "```json",
      "\"doc\": \"typedoc --out docs/src\"",
      "```",
      "Another good idea is to make your changelog file autogenerated too. As I mentioned before, commitizen supports conventional-changelog. So, we can take commits and convert them to the changelog file.",
      "Install [conventional-changelog-cli](https://www.npmjs.com/package/conventional-changelog-cli)",
      "```cmd",
      "npm i -D conventional-changelog-cli",
      "```",
      "And update package.json with the new command",
      "```json",
      "\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s\"",
      "```",
      "Don't worry, angular means only style formatting and nothing more.",
      "## Build",
      "The build is quite simple and it is just a matter to add build and clean commands to the package.json",
      "```json",
      "\"clean\":\"rmdir dist /S /Q\",",
      "\"build\": \"tsc --p ./ --sourceMap false\",",
      "```",
      "If you need bundling or minification - try [uglifyjs](https://www.npmjs.com/package/uglify-js).",
      "## Automation",
      "Ok, the most part already done. We created a bunch of different scripts to keep our code clean and correct. But running them each time manually is a quite boring task and can lead to mistakes. So, we need to automate them. As you know, when you make a commit few git events appear - pre-commit, post-commit and so on. We can use them to run our own scripts before the code will be committed or pushed. But there is a problem -  git hooks are not shareable. And that's why [husky](https://www.npmjs.com/package/husky) appears. This package wraps the git events and runs your scripts from package.json. If the script fails, commit will be canceled and you will get the message what's going wrong.",
      "Install husky",
      "```cmd",
      "npm i -D husky",
      "```",
      "And describe some hooks inside package.json",
      "```json",
      "\"precommit\":\"npm run prettier\",",
      "\"prepush\": \"call npm run lint && call npm run test\"",
      "```",
      "Now, when you try to make a commit prettier will run and fix all formatting issues. When you try to make a push - code style and tests will be done automatically. You can extend this commands whatever you need like sending notifications, extra check etc.",
      "## Publish",
      "Great, we are almost done. So, let's say we are ready to publish the package to npm. As you know, much work should be done before - tests, documentation update, version, and tags update. Easy to forget something, yeah? So, it is a good idea to automate this process too. For that purposes, we will use native npm hooks - preversion, version, and postversion. Add next lines to scripts section your package.json",
      "```json",
      "\"preversion\": \"npm run test\",",
      "\"version\": \"call npm run clean && call npm run build && call npm run doc && call npm run changelog && git add . && git commit -m 'changelogupdate' --no-verify\",",
      "\"postversion\": \"git add . && git push && git push --tags\"",
      "```",
      "When you will run npm version command, preversion script will run tests, version script will build your code and generate all documents. Then version will be increased and then all will be commited and pushed out. Now all you need is to run npm publish command and that's all. Just to commands and everything else will be done without any efforts from your side.",
      "At last, we need to specify what folders should be included in the project and where entry point can be located. Update package.json last time",
      "```json",
      "\"main\": \"./dist/index.min.js\",",
      "\"types\": \"./dist/index.d.ts\",",
      "\"files\": [",
      "        \"dist/\",",
      "        \"src/\",",
      "        \"tests/\"",
      "    ]",
      "```",
      "That's all, your awesome project is ready to go! Thanks for reading. If you have questions, please check my demo project [here](https://github.com/Drag13/IsNumberStrict).",
      "## Useful links",
      "* [.editorconfig](https://editorconfig.org/)",
      "* [prettier](https://github.com/prettier/prettier)",
      "* [tslint](https://palantir.github.io/tslint/)",
      "* [eslint](https://eslint.org/)",
      "* [typedoc](https://www.npmjs.com/package/typedoc)",
      "* [esdoc](https://esdoc.org/)",
      "* [commitizen](https://github.com/commitizen/cz-cli)",
      "* [conventional-changelog-cli](https://www.npmjs.com/package/conventional-changelog-cli)",
      "* [husky](https://www.npmjs.com/package/husky)",
      "* [demo](https://github.com/Drag13/IsNumberStrict)"
    ],
    "header": "# How to start a new JavaScript project with automated formatting, linting, testing, and documentation",
    "preview": "Keeping your code consistent and well-formatted not an easy task even when you work alone. But when you work with a team or with open source projects all start getting even harder. Everyone has their own code style, someone doesn't run tests, and no one writes documentation. This article will help you to set up all these things and even more - automate this routine to never do it manually."
  },
  {
    "name": "typescript-tips-tricks-case-study",
    "text": [
      "# Advanced TypeScript - Tips and Tricks",
      "It would seem that in 2022 it is a bit too late to talk about TypeScript - the technology is well known and popular. Despite this, some times TypeScript still used half-heartedly. Simple type annotations, null checking and nothing more. Therefore, I brought some interesting, purely practical cases to show mighty TypeScript in action!",
      "## Narrowing primitives",
      "Let's start simple. Imagine that we have a function that takes a key as input, extracts a translation from the dictionary by the key and returns it. What will be the type of this key? Most likely - string. But it is clear that not everyone string is a valid key - we certainly do not need the entire British Encyclopedia right? And of course we don't want to have typos.",
      "This problem can be solved in different ways. For example, if the translation does not exist, you can throw an exception (users will be very happy to get run time exception, right?). The second option is to return the same key, and pledge the fact that the key does not exist, so that later you can find out what went wrong. In any case, we will find out that the problem has occurred somewhere later, but we would like to know in advance.",
      "And here TypeScript has a very elegant solution - if you don't need the whole string, then be honest about it and just declare a subset:",
      "```typescript",
      "type TranslationKey = 'grey';",
      "function translate(key: TranslationKey){...}",
      "```",
      "Thanks to this technique, we get several advantages at once:",
      "- We are protected from typos and keys that we are not yet ready for at the build stage.",
      "- When some key changes `( grey-> gray)`, we will immediately see all the places where we need to update the code.",
      "- IntelliSense works - using the keys has become much easier, you donât have to climb and look for how this one is spelled every time `landing_big_ad_imageblock_subheder` (by the way, did you notice a typo?)",
      "The same trick can be used if we want to validate a value before using it:",
      "```typescript",
      "type Email = string;",
      "const sendEmail = (email: Email)=> {...}",
      "sendEmail('fake@email'); // fails",
      "```",
      "When we try to pass `sendEmail` any string to the method, TS will force us to check this string before, for example, by writing a [guard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards):",
      "```typescript",
      "// don't use in production please",
      "const isValidEmail = (maybeEmail: unknown): maybeEmail is Email =>",
      "  typeof maybeEmail === \"string\" && /^\\S+@\\S+$/.test(maybeEmail);",
      "```",
      "If you are interested in the details of how it works, here is a link to the [documentation](https://www.typescriptlang.org/docs/handbook/2/narrowing.html).",
      "## Derived from types",
      "We figured out the primitives, now I want to show another feature that I often use - creating a new type based on an existing one. In OOP, we usually use inheritance, but TypeScript allows you to transform one type into another. Surely you have already used the type `Partial<T>` or `Required<T>` ,which come straight out of the box. But in addition to built-in types, we can create our own, for example, like this:",
      "```typescript",
      "type User = { name: string };",
      "type Dto<T> = { [key in keyof T]: unknown };",
      "type UserDto = Dto<User>;",
      "```",
      "First, I described the domain model with which I am ready to work. For this example, I created a type User with a single field name that must contain a string. But since I don't want to relay on the third party service that the data comes from, I want to validate the response from the server. To do this, I created a derived type `UserDto` in which I am stating that I had no idea what they would send us. Now I, as well as everyone who comes after, will be forced to check the data before using it.",
      "Naturally, using this approach, you can also write a validator schema.",
      "Step 1. Let's create a generic type that contains all the same fields as the future type T, and the values ââwill be functions that take an argument of an unknown type and return a sign that the argument belongs to the given type.",
      "```typescript",
      "type DtoValidator<T> = {",
      "  [key in keyof T]: (v: unknown) => v is T[key];",
      "};",
      "```",
      "Step 2. Now we can write a validator in the form of a guard, in which we check the passed argument. If it satisfies the given conditions, we recognize that it belongs to the type NotEmptyString.",
      "```typescript",
      "const isNotEmptyString = (v: unknown): v is NotEmptyString =>",
      "  typeof v === \"string\" && v.length > 0;",
      "```",
      "Step 3. Finally let's put it all together into a validation scheme. Please note that now TS will ensure that all fields in the scheme are described and correctly filled out. If we miss something, TypeScript will throw an error.",
      "```typescript",
      "const userValidator: DtoValidator<User> = {",
      "  name: isNotEmptyString,",
      "};",
      "```",
      "The great thing here is that when we extend the domain model with a new field, TS will automatically remind us that this field is also needed to check.",
      "On my project, we use this approach for form validation. There is a form model, and a validator model is built on its basis. When form fields change (which happens periodically), TypeScript tells us where we went wrong.",
      "## Dynamic modification of types",
      "This trick might be especially relevant if you're using contexts in React, but the idea will work everywhere. TS allows you to infer new types on the fly based on the data you pass in. This may sound a little confusing, so let's look at an example.",
      "Let's write a function that greets the user:",
      "```typescript",
      "type User = { firstName: string };",
      "type Greetings = { greetingText: string };",
      "const getGreetings = ({ firstName, greetingText }: User & Greetings) =>",
      "  `${greetingText}, ${firstName}!`;",
      "```",
      "Obviously, the username will appear in runtime, but the text of the greeting itself can be static. You can write a higher order function that will inject `greetingText` into `getGreetings`.",
      "```typescript",
      "const greeterFactory = () => (user: User) =>",
      "  getGreetings({ ...user, greetingText: \"Hello\" });",
      "const greeter = greeterFactory();",
      "greeter({ firstName: \"Vitalii\" });",
      "```",
      "Everything is fine, but this solution is not generic and I want to have a general one that would:",
      "- Worked with arbitrary types.",
      "- Removed from the required type those fields that are already contained in the embedded object.",
      "A naive implementation might look like this:",
      "```typescript",
      "function factory<TModel, TResult, TInjected extends Partial<TModel>>(",
      "  callback: (m: TModel) => TResult,",
      "  inject: TInjected",
      ") {",
      "  return (m: Omit<TModel, keyof TInjected>) => callback({ ...inject, ...m });",
      "}",
      "```",
      "However, it won't compile because I made a curious mistake:",
      "```typescript",
      "factory((m: { greeting: string; name: string }) => m.name, {",
      "  greeting: \"hello\",",
      "  name: \"Vitalii\",",
      "})(\"Joker\");",
      "```",
      "Since the type of the embedded object completely overrides the required type, the resulting type can be anything, even a string. This is clearly not what we would like. And it's good that TypeScript was smart enough to catch it. Therefore, the code will have to be [rewritten](https://stackoverflow.com/questions/70154354/higher-order-function-how-to-deduct-injected-type-from-model-without-casting/70334649#70334649):",
      "```typescript",
      "// I am not a monster",
      "function factory<",
      "  TCallback extends (arg: any) => any,",
      "  TModel extends Parameters<TCallback>[0],",
      "  TInjected extends Partial<TModel>",
      ">(callback: TCallback, injected: TInjected) {",
      "  return function <TProps extends Omit<TModel, keyof TInjected>>(",
      "    props: TProps extends object ? TProps : never",
      "  ): ReturnType<TCallback> {",
      "    return callback({ ...injected, ...props });",
      "  };",
      "}",
      "const greeter = (_: { greeting: string; name: string }) => \"\";",
      "// \"Argument of type 'string' is not assignable to parameter of type 'never'\"",
      "const failed = factory(greeter, {",
      "  greeting: \"hello\",",
      "  name: \"Vitalii\",",
      "})(\"Joker\");",
      "// // Works with full IntelliSense support.",
      "const working = factory(greeter, {",
      "  greeting: \"hello\",",
      "})({ name: \"test\" });",
      "```",
      "Now everything works as expected, apart from a t-i-i-iny moment. First, it's hard to read, although the idea here is pretty simple and revolves around TypeScript's ability to extract types from functions and the Omit utility type. And secondly, in runtime, both in injected, and in props, an object with a much larger number of fields can get in, and this should be borne in mind.",
      "For us, this approach came in handy when we wrote our connectors to the data store in React. As a result, only those fields that were not in the store had to be passed to the component, it would âtakeâ the rest itself, and TypeScript would check that we had not forgotten to forward the missing ones. Since all objects are under our control, the nuance I mentioned was not a problem.",
      "## Summary",
      "As you can see, TypeScript is more than just type annotation. It allows you to create subsets, projections, type inference on the fly, and much more that I didn't mention. Although there is no TypeScript at runtime, well-written types make development easier and can prevent misses.",
      "On the other hand, seemingly obvious TypeScript solutions don't work. Mistakes are incomprehensible and not obvious, especially at the beginning of working with the language (and, to be honest, later too). The start of the project is also slower, since you need to design and describe types, and then also fix where you missed.",
      "Still, the convenience that TypeScript provides is well worth it. Introducing new people to the project and even returning to a module that you have not worked with for at least a month is much easier and more enjoyable. The main thing is to maintain balance, as the main character of one very philosophical game said. If you see that TS complicates the support of your code, then someone has taken a wrong turn."
    ],
    "header": "# Advanced TypeScript - Tips and Tricks",
    "preview": "It would seem that in 2022 it is a bit too late to talk about TypeScript - the technology is well known and popular. Despite this, some times TypeScript still used half-heartedly. Simple type annotations, null checking and nothing more. Therefore, I brought some interesting, purely practical cases to show mighty TypeScript in action!"
  },
  {
    "name": "typescript-tips-tricks-declarations",
    "text": [
      "# TypeScript Tips and Tricks - Declarations With Examples",
      "[![typescript tips and trics declarations](~/img/kdpv/ts-declarations.png)](./index.pug)",
      "TypeScript is a very powerful language and it is becoming more and more popular. I would say that TypeScript is that kind of language that is easy to learn but difficult to master. In this article, I will show you some useful tips and tricks about TypeScript's declarations that may help you in everyday coding and will keep your code type-safe.",
      "## Global object augmentation in TypeScript",
      "The declaration is one of the most important parts of the TypeScript and of course, you already familiar with it. Despite this, sometimes declarations might be tricky.",
      "Imagine that you need to extend global object (like Window) with custom properties. If you will try to do it directly, TypeScript will show an error like this: `Property 'customProperty' does not exist on type 'Window & typeof globalThis'.ts(2339)`. This happens because `customProperty` not exists in the corresponding type and TypeScript disallows you to operate with not existed properties.",
      "The popular way to solve this (and incorrect), is to cast the desired object to `any` and then, assign or use new properties. However, in this case, we will lose IntelliSense and type safety. A much better way to extend globally declared class is to declare a new, correct interface with the same name:",
      "```typescript",
      "// window.d.ts",
      "declare interface Window {",
      "  config: {",
      "    env: \"dev\" | \"prod\";",
      "  };",
      "}",
      "```",
      "This approach named \"Global Augmentation\". The good news is that you don't need to redeclare all other properties, you still can use all other. The bad news is that you can't override existing properties without manual correcting corresponding .d.ts file. If you want to track this issue, check this [link](https://github.com/microsoft/TypeScript/issues/36146)",
      "**Trick:** You can have multiple global augmentations in a single file.",
      "If you want not only update the type but also add new behavior to the global object, the technique will be slightly different and you need to follow the next steps:",
      "* Create new `.ts` (not `.d.ts`) file",
      "* Declare interface with the same name",
      "* Add actual code",
      "* Import this file in the entry point of your application",
      "Simple example adding a new method to the Array:",
      "```typescript",
      "// array.ts",
      "declare interface Array<T> {",
      "  foo(): string;",
      "}",
      "Array.prototype.foo = function (): string {",
      "  return \"bar\";",
      "};",
      "```",
      "```typescript",
      "// index.ts",
      "import \"./array.ts\";",
      "[].foo();",
      "```",
      "**Important note:** Extend prototype, not the class itself.",
      "## Adding static methods to the existed class in TypeScript",
      "Let's move further. What if you want to add a new **static** method to the existed class, like `Array`? In this case, you need to do the same as in the previous chapter but extend **constructor** of the class you want to extend:",
      "- Declare a new interface for the **constructor** you want to extend,",
      "- Add new property/method to the class constructor (not to the prototype!)",
      "- Import the file in the entry point of your application",
      "Code example:",
      "```typescript",
      "// array.ts",
      "declare interface ArrayConstructor {",
      "    foo(): string;",
      "}",
      "Array.foo = () => `hello from static method`;",
      "```",
      "```typescript",
      "// index.ts",
      "import \"./array.ts\";",
      "[].foo();",
      "```",
      "**Important note:** You should avoid any import or export statements in this file or your file will be treated as module and trick will not work.",
      "## Adding types for the third-party libraries in TypeScript",
      "As you can see, extending global objects in the TypeScript is quite simple. But how to add custom types for the 3rd party library? In this case, you should use a module declaration statement:",
      "```typescript",
      "// mytestlib.d.ts",
      "declare module \"my-test-lib\" {",
      "  export function main_answer(): number;",
      "}",
      "```",
      "Now, when you will import something from `my-test-lib` you will have proper IntelliSense and type checking. Don't forget to send a PR to the [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) to let other people use your types.",
      "**Important note:** don't forget to ensure that your *.d.ts files are visible for the TypeScript. Check `files/include` option in your tsconfig.json. If you have any issues, I have some more info about [how to add custom typings into the TypeScript project](https://drag13.io/posts/custom-typings/index.html)",
      "## Summary",
      "In this article we discussed how to:",
      "* Add custom properties to the global or already existed types",
      "* Add static properties to already existed class",
      "* Add custom types for the 3rd party code",
      "That's is the end of the first part of the TypeScript tips and tricks for beginners. See you soon!"
    ],
    "header": "# TypeScript Tips and Tricks - Declarations With Examples",
    "preview": "[![typescript tips and trics declarations](~/img/kdpv/ts-declarations.png)](./index.pug)"
  },
  {
    "name": "typescript-tricks-utility-examples",
    "text": [
      "# TypeScript Tips and Tricks - Utility Types With Examples",
      "[![typescript tips and trics declarations](~/img/kdpv/ts-declarations.png)](./index.pug)",
      "TypeScript is a very powerful language, however, it heavily relies on the types. And sometimes, you may found that you write more types than actual code. In this case, you should take a look into the Utility types that will help you to write fewer types and still keep your code type-safe.",
      "Let's start from the simple example - imagine that you have a list of events produced by the application and a list of handlers for them. So you may write (don't do this way) something like this:",
      "```typescript",
      "type Action = \"move\" | \"stop\";",
      "function handleAction(action: Action) {",
      "  if (action === \"move\") {",
      "    console.log(\"i am moving\");",
      "  }",
      "  if (action === \"stop\") {",
      "    console.log(\"i am stopped\");",
      "  }",
      "}",
      "```",
      "Suddenly, requirements changes (requirements always changing suddenly ð), and now you need to handle `beep` action. You update the Action type, but might forget to update `handleAction` function which will lead to a bug. However, with help of utility types, you can be protected from such type of failer:",
      "```typescript",
      "type Action = \"move\" | \"stop\" | \"beep\";",
      "const handlers: Record<Action, () => void> = {",
      "  move: () => console.log(\"i am moving\"),",
      "  stop: () => console.log(\"i am stopped\"),",
      "  beep: () => console.log(\"beeep!\"),",
      "};",
      "const handlerAction = (action: Action) => handlers[action]();",
      "```",
      "Now, when new action will come, you will be automatically notified that you need to extend your handlers. If you accidentally remove some code from handlers, you will be notified as well. Great TypeScript feature!",
      "You can do the same trick with objects:",
      "```typescript",
      "type User = { name: string; age: number };",
      "type ValidationMap = Record<keyof User, (user: User) => boolean>;",
      "const validations: ValidationMap = {",
      "  age: ({ age }) => age > 21,",
      "  name: ({ name }) => name != null,",
      "};",
      "```",
      "This was done with the help of the `keyof` keyword. It extracts keys from the interface or type and creates another type. Simplifying it may look like this:",
      "```typescript",
      "interface IPerson = {age: number, name: string};",
      "type PersonProps = keyof IPerson; // 'age | name';",
      "```",
      "This tip is very useful for the validation scenarios when you want to ensure that all properties of the object are handled.",
      "If you want to know how to extract types from the array (or tuples), it's also easy, just don't forget to use `as const` statement:",
      "```typescript",
      "const events = [\"success\", \"faile\"] as const;",
      "const valueExtractors: Record<typeof roles[number], Dispatcher> = {",
      "  success: () => dispatch(\"success\"),",
      "  faile: () => dispatch(\"faile\"),",
      "};",
      "```",
      "Another useful utility type, you might be already familiar with is `Partial<TModel>` type. It is very handy when you are filling a domain model from untrusted resources or do some null/undefined behavior testing. Imagine that you are fetching big objects that might be partially filled and want to avoid `Cannot read property XXX of null` type exception. In this case, you can use Partial type and TypeScript will automatically suggest you verify your data:",
      "```typescript",
      "// This model we are using inside the application",
      "type DomainUser = {",
      "  name: string;",
      "  age: number;",
      "};",
      "type UserDto = Partial<DomainUser>; // This model we expect to get from API",
      "const fetchUser = (): UserDto => ({});",
      "console.log(fetchUser().age.toString()); // Now, TypeScript is warning about the possible error and we now that check is needed",
      "```",
      "`Partial<T>` is a very useful utility type, however, it has an issue. It is not working with nested objects. You can use this code to write your own DeepPartial type:",
      "```typescript",
      "type DeepPartial<T> = {",
      "  [P in keyof T]?: T[P] extends Array<infer U>",
      "    ? Array<DeepPartial<U>>",
      "    : T[P] extends ReadonlyArray<infer U>",
      "    ? ReadonlyArray<DeepPartial<U>>",
      "    : DeepPartial<T[P]>;",
      "};",
      "```",
      "The code seems a bit tricky but it uses only two technics - conditional types and inferring. Both of them will be covered in the next article.",
      "Speaking about partial types, I can't ignore one more very helpful classes - `Omit<TModel, TKeys>`. It helps you to exclude or override some properties based on already created class:",
      "```typescript",
      "type User = {",
      "  name: string;",
      "  email: string;",
      "  sex: NonExistedTypeFitsAll;",
      "};",
      "interface MultiEmailUser extends Omit<User, \"email\"> {",
      "  email: string[];",
      "}",
      "```",
      "As you can see, using this technique you don't need to copy-paste user type. You just transform on type into something that fits better. If you need to omit more properties, just use Union type here:",
      "```typescript",
      "type CuttedUser = Omit<User, \"email\" | \"email\">;",
      "```",
      "That is all. If you want to know more about TypeScript utility types - visit the [TypeScript handbook](https://www.typescriptlang.org/docs/handbook/utility-types.html).",
      "See you next time!"
    ],
    "header": "# TypeScript Tips and Tricks - Utility Types With Examples",
    "preview": "[![typescript tips and trics declarations](~/img/kdpv/ts-declarations.png)](./index.pug)"
  },
  {
    "name": "v8-bytecode",
    "text": [
      "# How to get javascript bytecode from V8 and others in 2019",
      "Have you ever thought about how your javascript code looks like in bytecode? If yes, just follow the white rabbit.",
      "Install latest Node.Js or check your current version using -v command. If it's 8.3 or above, everything is ok. If no, check the second part of this article.",
      "Then run your code with a flag --print-bytecode. It will instruct the Node to display the bytecode directly to your console.",
      "```cmd",
      "node --print-bytecode --eval 1+1",
      "```",
      "After executing this command you will see a very long list with a code like this:",
      "```asm",
      "Parameter count 2",
      "Register count 3",
      "Frame size 24",
      "   12 E> 000002252055F082 @    0 : a5                StackCheck",
      "   33 S> 000002252055F083 @    1 : 0b                LdaZero",
      "         000002252055F084 @    2 : 26 fb             Star r0",
      "```",
      "> If you are curious about what it is and how to read this - here is a good [point to start](https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775).",
      "But what if you want to see only some part of the code, let's say some function? Luckily, we have one more flag to filter bytecode by function's name ---print-bytecode-filter.",
      "```cmd",
      "node --print-bytecode --print-bytecode-filter=func_name my_javascript_file",
      "```",
      "I also pointed Node.Js to read code from my_javascript_file instead of evaluation. Another useful thing is that you can dump the result into another file with pipe operator (for PowerShell), so the final command can look like this:",
      "```cmd",
      "node --print-bytecode --print-bytecode-filter=func_name my_javascript_file > result.txt",
      "```",
      "And that's it - really simple, I would say! But we can do a bit deeper because sometimes this is not enough and there are two reasons for this:",
      "First thing is that guys from Node.Js did a really awesome job and split Node.js out from the engine. This means that in real life, your Node.Js can use not V8 from Google team, but Chakra engine from Microsoft or SpiderMonkey or even something else! And you might want to see bytecode from a selected engine.",
      "Another point is that when you use Node.Js, you always use production build which is reasonable. But in the release version, some interesting flags are hidden from us. For example, you can't get AST tree, you get a shorter version of the bytecode (yes, it can be even more detailed). So, if you want to get all the power, you should get a debug version of Node.Js.",
      "For quite a long time before, to achieve this you had to download all related source code for the engine you wanted and compile it by yourself. This has been a real pain, especially for Windows users. But, times changed and thanks to the [jsvu](https://github.com/GoogleChromeLabs/jsvu) team, we`ve got a really simple way to get any engine we need, even a debug version for V8. Thanks, guys, you are really awesome!",
      "So, let's say you want to get V8's debug version. All you need is to run this simple command:",
      "```cmd",
      "npx jsvu",
      "```",
      "And that's all! You will be prompted with a few questions (about OS, engines you want to get, etc) and then you will get all already built and ready engines you want! Isn't that awesome?",
      "## More Useful flags",
      "* --print-ast will print Abstract Syntax Tree for your code (v8-debug only)",
      "* --print-opt-code/--print-opt-code-filter will print optimized code (really hard to read)  (node, v8-debug)",
      "* --trace-turbo/--trace-turbo-filter - will show optimization filter for TurboFan compiler (any)",
      "* --print-code --print-code-verbose will print even more information for the code  but has no filter for function name (any)",
      "If you want to see all the flags available for [v8](https://gist.github.com/Drag13/345136498ee2f2605f188f22d2258af0) and [v8-debug](https://gist.github.com/Drag13/92089a081a0056dd6872b77c2af88d94), just check the links above. (Applicable for  V8 v7.5.203)",
      "## Useful links",
      "* [Understanding bytecode from V8](https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775)",
      "* [V8 bytescodes](https://github.com/v8/v8/blob/master/src/interpreter/bytecodes.h)",
      "* [V8 bytecodes with comments](https://github.com/v8/v8/blob/master/src/interpreter/interpreter-generator.cc)",
      "That's it guys, thanks for your time, hope you found this fun enough."
    ],
    "header": "# How to get javascript bytecode from V8 and others in 2019",
    "preview": "Have you ever thought about how your javascript code looks like in bytecode? If yes, just follow the white rabbit."
  }
]
